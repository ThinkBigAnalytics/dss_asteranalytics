{
  "json_schema_major_version": "1",
  "json_schema_minor_version": "2",
  "json_content_version": "1",
  "function_name": "SeriesSplitter",
  "function_version": "1.1",
  "function_type": "driver",
  "function_r_name": "aa.series.splitter",
  "short_description": "Splits the partitions in the input table.",
  "long_description": "SeriesSplitter splits the partitions in the input table into smaller-sized sub-partitions.",
  "argument_clauses": [
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "name": "Domain",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "The address of the Queen. The host parameter is the Aster Database Queen’s IP address or hostname.",
      "description": "The address of the Queen. The host parameter is the Aster Database Queen’s IP address or hostname.",
      "datatype": "DRIVER",
      "allowsLists": false,
      "useInR": false,
      "rOrderNum": 0
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "name": "Database",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "The name of the database where the input table is located.",
      "description": "The name of the database where the input table is located.",
      "datatype": "DRIVER",
      "allowsLists": false,
      "useInR": false,
      "rOrderNum": 0
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "name": "UserId",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "The Aster Database user name of the user running this function.",
      "description": "The Aster Database user name of the user running this function.",
      "datatype": "DRIVER",
      "allowsLists": false,
      "useInR": false,
      "rOrderNum": 0
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "name": "Password",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "The Aster Database password of the user.",
      "description": "The Aster Database password of the user.",
      "datatype": "DRIVER",
      "allowsLists": false,
      "useInR": false,
      "rOrderNum": 0
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "name": "SSLSettings",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "A string that includes all the SSL settings, except the password for the truststore.",
      "description": "A string that includes all the SSL settings, except the password for the truststore.",
      "datatype": "DRIVER",
      "allowsLists": false,
      "useInR": false,
      "rOrderNum": 0
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "name": "SSLTrustStorePassword",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "The password for the SSL truststore.",
      "description": "The password for the SSL truststore.",
      "datatype": "DRIVER",
      "allowsLists": false,
      "useInR": false,
      "rOrderNum": 0
    },
    {
      "isOutputTable": false,
      "name": "InputTable",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": "Specifies the name of the input table to be split.",
      "description": "Specifies the name of the input table to be split.",
      "datatype": "TABLE_NAME",
      "allowsLists": false,
      "rName": "data",
      "useInR": true,
      "rOrderNum": 1
    },
    {
      "isOutputTable": true,
      "defaultValue": "partitioned_",
      "name": "OutputTable",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the name of table that the function creates to store the data splits for all partitions. The default value is 'partitioned_input_table'. For example, if input_table is 'time_series', then output_table is 'partitioned_time_series'.",
      "description": "Specifies the name of table that the function creates to store the data splits for all partitions. The default value is 'partitioned_input_table'. For example, if input_table is 'time_series', then output_table is 'partitioned_time_series'.",
      "datatype": "TABLE_NAME",
      "allowsLists": false,
      "rName": "output.table",
      "useInR": true,
      "rOrderNum": 100
    },
    {
      "isOutputTable": true,
      "defaultValue": "stats_",
      "name": "StatsTable",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the name of table that the function creates to store the statistics for the splitting operation that it performs. The default value is 'stats_input_table'. For example, if data is 'time_series', then stats.table is 'stats_time_series'.",
      "description": "Specifies the name of table that the function creates to store the statistics for the splitting operation that it performs. The default value is 'stats_input_table'. For example, if input_table is 'time_series', then stats_table is 'stats_time_series'.",
      "datatype": "TABLE_NAME",
      "allowsLists": false,
      "rName": "stats.table",
      "useInR": true,
      "rOrderNum": 101
    },
    {
      "targetTable": [
        "InputTable"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "ALL"
      ],
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "PartitionByColumns",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": "Specifies the partitioning columns of input_table. These columns determine the identity of a partition. For data type restrictions of these columns, see the Aster Database Documentation.",
      "description": "Specifies the partitioning columns of input_table. These columns determine the identity of a partition. For data type restrictions of these columns, see the Aster Database Documentation.",
      "datatype": "COLUMN_NAMES",
      "allowsLists": true,
      "rName": "partition.columns",
      "useInR": true,
      "rOrderNum": 2
    },
    {
      "targetTable": [
        "InputTable"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "ALL"
      ],
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "OrderByColumns",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the ordering columns of input_table. These columns establish the order of the rows and splits. Without this argument, the function can split the rows in any order.",
      "description": "Specifies the ordering columns of input_table. These columns establish the order of the rows and splits. Without this argument, the function can split the rows in any order.",
      "datatype": "COLUMN_NAMES",
      "allowsLists": true,
      "rName": "order.by.columns",
      "useInR": true,
      "rOrderNum": 4
    },
    {
      "targetTable": [
        "InputTable"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "ALL"
      ],
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "Accumulate",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the names of input_table columns (other than those specified by partition.columns and order.by.columns) to copy to the output table. By default, only the columns specified by partition.columns and order.by.columns are copied to the output table.",
      "description": "Specifies the names of input_table columns (other than those specified by PartitionByColumns and OrderByColumns) to copy to the output table. By default, only the columns specified by PartitionByColumns and OrderByColumns are copied to the output table.",
      "datatype": "COLUMN_NAMES",
      "allowsLists": true,
      "rName": "accumulate",
      "useInR": true,
      "rOrderNum": 7
    },
    {
      "defaultValue": 4,
      "lowerBound": 1,
      "upperBound": 9223372036854775807,
      "lowerBoundType": "INCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "SplitCount",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Note: If input_table has multiple partitions, then you cannot specify split.count. Instead, specify rows.per.split. Specifies the desired number of splits in a partition of the output table. The value of split_count must be a positive BIGINT, and its upper bound is the number of rows in the partition. The default value is 4. Base the value of split_count on the desired amount of parallelism. For example, for a cluster with 10 vworkers, make split_count a multiple of 10. If the number of rows in input_table (n) is not exactly divisible by split_count, then the function estimates the number of splits in the partition, using this formula: ceiling (n / ceiling (n / split_count) ) ",
      "description": "Note: If input_table has multiple partitions, then you cannot specify SplitCount. Instead, specify RowsPerSplit. Specifies the desired number of splits in a partition of the output table. The value of split_count must be a positive BIGINT, and its upper bound is the number of rows in the partition. The default value is 4. Base the value of split_count on the desired amount of parallelism. For example, for a cluster with 10 vworkers, make split_count a multiple of 10. If the number of rows in input_table (n) is not exactly divisible by split_count, then the function estimates the number of splits in the partition, using this formula: ceiling (n / ceiling (n / split_count) ) ",
      "datatype": "LONG",
      "allowsLists": false,
      "rName": "split.count",
      "useInR": true,
      "rOrderNum": 5
    },
    {
      "defaultValue": 1000,
      "lowerBound": 1,
      "upperBound": 9223372036854775807,
      "lowerBoundType": "INCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "RowsPerSplit",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Note: If input_table has multiple partitions, then specify rows.per.split instead of split.count. Specifies the desired maximum number of rows in each split in the output table. If the number of rows in input_table is not exactly divisible by rows_per_split, then the last split contains fewer than rows_per_split rows, but no row contains more than rows_per_split rows. The value of rows_per_split must be a positive BIGINT. If input_table has multiple partitions and you do not specify rows.per.split, then the function uses the value 1000.",
      "description": "Note: If input_table has multiple partitions, then specify RowsPerSplit instead of SplitCount. Specifies the desired maximum number of rows in each split in the output table. If the number of rows in input_table is not exactly divisible by rows_per_split, then the last split contains fewer than rows_per_split rows, but no row contains more than rows_per_split rows. The value of rows_per_split must be a positive BIGINT. If input_table has multiple partitions and you do not specify RowsPerSplit, then the function uses the value 1000.",
      "datatype": "LONG",
      "allowsLists": false,
      "rName": "rows.per.split",
      "useInR": true,
      "rOrderNum": 6
    },
    {
      "defaultValue": [
        1
      ],
      "lowerBound": 0,
      "upperBound": 1000,
      "lowerBoundType": "INCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "requiredLength": 2,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "DuplicateRowsCount",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the number of rows to duplicate across split boundaries. By default, the function duplicates one row from the previous partition and one row from the next partition. If you specify only value1, then the function duplicates value1 rows from the previous partition and value1 rows from the next partition. If you specify both value1 and value2, then the function duplicates value1 rows from the previous partition and value2 rows from the next partition. Each argument value must be nonnegative integer less than or equal to 1000. ",
      "description": "Specifies the number of rows to duplicate across split boundaries. By default, the function duplicates one row from the previous partition and one row from the next partition. If you specify only value1, then the function duplicates value1 rows from the previous partition and value1 rows from the next partition. If you specify both value1 and value2, then the function duplicates value1 rows from the previous partition and value2 rows from the next partition. Each argument value must be nonnegative integer less than or equal to 1000. ",
      "datatype": "LONG",
      "allowsLists": true,
      "rName": "duplicate.rows.count",
      "useInR": true,
      "rOrderNum": 3
    },
    {
      "permittedValues": [],
      "defaultValue": "split_id",
      "isOutputColumn": true,
      "name": "SplitIdColumn",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the name for the output table column that is to contain the split identifiers. The default value is 'split_id'. If the output table has another column named split_id_column, then the function returns an error. Therefore, if the output table has a column named 'split_id' (specified by accumulate, partition.columns, or Order_By_Columns), then you must use split.id.column to specify a different split_id_column.",
      "description": "Specifies the name for the output table column that is to contain the split identifiers. The default value is 'split_id'. If the output table has another column named split_id_column, then the function returns an error. Therefore, if the output table has a column named 'split_id' (specified by Accumulate, PartitionByColumns, or Order_By_Columns), then you must use SplitIDColumn to specify a different split_id_column.",
      "datatype": "STRING",
      "allowsLists": false,
      "rName": "split.id.column",
      "useInR": true,
      "rOrderNum": 8
    },
    {
      "defaultValue": true,
      "name": "ReturnStatsTable",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies whether the function returns the data in stats_table in response to the command SELECT * FROM SeriesSplitter. The default value is 'true'. When this value is 'false', the function returns only the data in output_table.",
      "description": "Specifies whether the function returns the data in stats_table in response to the command SELECT * FROM SeriesSplitter. The default value is 'true'. When this value is 'false', the function returns only the data in output_table.",
      "datatype": "BOOLEAN",
      "allowsLists": false,
      "rName": "return.stats.table",
      "useInR": true,
      "rOrderNum": 9
    },
    {
      "defaultValue": false,
      "name": "OverwriteOutput",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies whether the function overwrites stats_table and output_table if they exist. The default value is 'false'.",
      "description": "Specifies whether the function overwrites stats_table and output_table if they exist. The default value is 'false'.",
      "datatype": "BOOLEAN",
      "allowsLists": false,
      "rName": "overwrite.output",
      "useInR": true,
      "rOrderNum": 10
    },
    {
      "permittedValues": [],
      "defaultValue": [
        "-1"
      ],
      "isOutputColumn": false,
      "matchLengthOfArgument": "OrderByColumns",
      "allowPadding": true,
      "name": "ValuesBeforeFirst",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "If duplicate.rows.count is nonzero and order.by.columns is specified, then values.before.first specifies the values to be stored in the ordering columns that precede the first row of the first split in a partition as a result of duplicating rows across split boundaries. If values.before.first specifies only one value and order.by.columns specifies multiple ordering columns, then the specified value is stored in every ordering column. If values.before.first specifies multiple values, then it must specify a value for each ordering column. The value and the ordering column must have the same data type. For the data type VARCHAR, the values are case-insensitive. The default values for different data types are:  Numeric: -1,  CHAR(n) or VARCHAR : '-1',  Date- or time-based: 1900-01-01 0:00:00,  CHARACTER: '0',  Bit: 0,  Boolean: 'false',  IP4 : 0.0.0.0,  UUID: 0000-0000-0000-0000-0000-0000-0000-0000 ",
      "description": "If DuplicateRowsCount is nonzero and OrderByColumns is specified, then ValuesBeforeFirst specifies the values to be stored in the ordering columns that precede the first row of the first split in a partition as a result of duplicating rows across split boundaries. If ValuesBeforeFirst specifies only one value and OrderByColumns specifies multiple ordering columns, then the specified value is stored in every ordering column. If ValuesBeforeFirst specifies multiple values, then it must specify a value for each ordering column. The value and the ordering column must have the same data type. For the data type VARCHAR, the values are case-insensitive. The default values for different data types are:  Numeric: -1,  CHAR(n) or VARCHAR : '-1',  Date- or time-based: 1900-01-01 0:00:00,  CHARACTER: '0',  Bit: 0,  Boolean: 'false',  IP4 : 0.0.0.0,  UUID: 0000-0000-0000-0000-0000-0000-0000-0000 ",
      "datatype": "STRING",
      "allowsLists": true,
      "rName": "values.before.first",
      "useInR": true,
      "rOrderNum": 11
    },
    {
      "permittedValues": [],
      "defaultValue": [
        "null"
      ],
      "isOutputColumn": false,
      "matchLengthOfArgument": "OrderByColumns",
      "allowPadding": true,
      "name": "ValuesAfterLast",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "If duplicate.rows.count is nonzero and order.by.columns is specified, then values.after.last specifies the values to be stored in the ordering columns that follow the last row of the last split in a partition as a result of duplicating rows across split boundaries. If values.after.last specifies only one value and order.by.columns specifies multiple ordering columns, then the specified value is stored in every ordering column. If values.after.last specifies multiple values, then it must specify a value for each ordering column. The value and the ordering column must have the same data type.  For the data type VARCHAR, the values are case-insensitive. The default value is NULL. ",
      "description": "If DuplicateRowsCount is nonzero and OrderByColumns is specified, then ValuesAfterLast specifies the values to be stored in the ordering columns that follow the last row of the last split in a partition as a result of duplicating rows across split boundaries. If ValuesAfterLast specifies only one value and OrderByColumns specifies multiple ordering columns, then the specified value is stored in every ordering column. If ValuesAfterLast specifies multiple values, then it must specify a value for each ordering column. The value and the ordering column must have the same data type.  For the data type VARCHAR, the values are case-insensitive. The default value is NULL. ",
      "datatype": "STRING",
      "allowsLists": true,
      "rName": "values.after.last",
      "useInR": true,
      "rOrderNum": 12
    },
    {
      "permittedValues": [],
      "isOutputColumn": true,
      "name": "DuplicateColumn",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the name of the column that indicates whether a row is duplicated from the neighboring split. If the row is duplicated, this column contains 1; otherwise it contains 0.",
      "description": "Specifies the name of the column that indicates whether a row is duplicated from the neighboring split. If the row is duplicated, this column contains 1; otherwise it contains 0.",
      "datatype": "STRING",
      "allowsLists": false,
      "rName": "duplicate.column",
      "useInR": true,
      "rOrderNum": 13
    },
    {
      "defaultValue": false,
      "name": "PartialSplitId",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies whether split_id_column contains only the numeric split identifier. The default value is 'false'. If the value is 'true', then split_id_column contains a numeric representation of the split identifier that is unique for each partition. To distribute the output table by split, use a combination of all partitioning columns and split_id_column. If the value is 'false', then split_id_column contains a string representation of the split that is unique across all partitions. The function generates the string representation by concatenating the partitioning columns with the order of the split inside the partition (the numeric representation). In the string representation, hyphens separate partitioning column names from each other and from the order. For example, 'pcol1- pcol2-3'. ",
      "description": "Specifies whether split_id_column contains only the numeric split identifier. The default value is 'false'. If the value is 'true', then split_id_column contains a numeric representation of the split identifier that is unique for each partition. To distribute the output table by split, use a combination of all partitioning columns and split_id_column. If the value is 'false', then split_id_column contains a string representation of the split that is unique across all partitions. The function generates the string representation by concatenating the partitioning columns with the order of the split inside the partition (the numeric representation). In the string representation, hyphens separate partitioning column names from each other and from the order. For example, 'pcol1- pcol2-3'. ",
      "datatype": "BOOLEAN",
      "allowsLists": false,
      "rName": "partial.split.id",
      "useInR": true,
      "rOrderNum": 14
    }
  ]
}
