{
  "json_schema_major_version": "1",
  "json_schema_minor_version": "2",
  "json_content_version": "1",
  "function_name": "Glm2",
  "function_version": "1.2",
  "function_type": "driver",
  "function_r_name": "aa.glm2",
  "short_description": "Implements the Glm2 SQL-MR function.",
  "long_description": "The GLM2 function is similar to the GLM function except that: 1) GLM2 supports the regularization models ridge, lasso, and elastic net. 2) GLM2 uses the coordinate descent method to minimize the loss function (GLM uses the Fisher scoring method). The GLM2 function generates a model table that you can input to the GLM2Predict function.",
  "input_tables": [
    {
      "name": "InputTable",
      "allowsLists": false,
      "useInR": true,
      "description": "Specifies the name of the table that contains the columns described in the table in Input.",
      "isRequired": true,
      "datatype": "TABLE_ALIAS",
      "rOrderNum": 1,
      "rName": "input.table",
      "alternateNames": [],
      "rDescription": "Specifies the name of the table that contains the columns described in the table in Input.",
      "requiredInputKind": [],
      "isOrdered": false,
      "partitionByOne": false
    }
  ],
  "output_tables": [
    {
      "name": "ModelTable",
      "allowsLists": false,
      "useInR": true,
      "description": "Specifies the name for the output table that contains the trained model. The trained model contains parameters, statistics, and the coefficients of the predictors for lambda. This table must not exist.",
      "isRequired": true,
      "datatype": "TABLE_NAME",
      "rOrderNum": 100,
      "rName": "model.table",
      "alternateNames": [],
      "rDescription": "Specifies the name for the output table that contains the trained model. The trained model contains parameters, statistics, and the coefficients of the predictors for lambda. This table must not exist.",
      "isOutputTable": true
    },
    {
      "name": "RegularizationTable",
      "allowsLists": false,
      "useInR": true,
      "description": "Specifies the name for the output table that contains the statistics and coefficients of each lambda. Recommended if you want predicted results for each lambda from GLM2Predict.",
      "isRequired": false,
      "datatype": "TABLE_NAME",
      "rOrderNum": 101,
      "rName": "regularization.table",
      "alternateNames": [],
      "rDescription": "Specifies the name for the output table that contains the statistics and coefficients of each lambda. Recommended if you want predicted results for each lambda from GLM2Predict.",
      "isOutputTable": true
    }
  ],
  "argument_clauses": [
    {
      "name": "InputColumns",
      "allowsLists": true,
      "rOrderNum": -1,
      "useInR": true,
      "rName": "input.columns",
      "allowedTypes": [],
      "datatype": "COLUMN_NAMES",
      "targetTable": [
        "InputTable"
      ],
      "rFormulaUsage": true,
      "checkDuplicate": true,
      "isRequired": true,
      "rDescription": "Specifies the names of the input table columns that contain the variables to use as predictors (independent variables).",
      "alternateNames": [],
      "allowedTypeGroups": [
        "ALL"
      ],
      "allowPadding": true,
      "matchLengthOfArgument": "",
      "description": "Specifies the names of the input_table columns that contain the variables to use as predictors (independent variables)."
    },
    {
      "name": "ResponseColumn",
      "allowsLists": false,
      "rOrderNum": 0,
      "useInR": true,
      "rName": "response.column",
      "allowedTypes": [],
      "datatype": "COLUMN_NAMES",
      "targetTable": [
        "InputTable"
      ],
      "rFormulaUsage": true,
      "checkDuplicate": true,
      "isRequired": true,
      "rDescription": "Specifies the name of the input table column that contains the responses.",
      "requiredLength": 1,
      "alternateNames": [],
      "allowedTypeGroups": [
        "NUMERIC"
      ],
      "allowPadding": true,
      "matchLengthOfArgument": "",
      "description": "Specifies the name of the input_table column that contains the responses."
    },
    {
      "name": "CategoricalColumns",
      "allowsLists": true,
      "rOrderNum": -2,
      "useInR": true,
      "rName": "categorical.columns",
      "allowedTypes": [],
      "datatype": "COLUMN_NAMES",
      "targetTable": [
        "InputTable"
      ],
      "rFormulaUsage": true,
      "checkDuplicate": true,
      "isRequired": false,
      "rDescription": "Specifies the names of the input table columns that contain categorical variables, and which of their categories to use in the model. Default behavior: The function treats all variables as numerical. Each categorical_column_and_categories has one of these formats:  1) 'categorical_column:max_cardinality' : Uses the most common categories in categorical_column and groups the other categories into the category 'others'. For example, 'column_a:3' specifies that for column_a, the function uses the 3 most common categories and sets the category of the rows that do not belong to those 3 categories to 'others'.  2) 'categorical_column:(category [,...])' : Uses the specified categories of categorical_column and groups the other categories into the category 'others'. For example, 'column_a : (red, yellow, blue)' specifies that for column_a, the function uses the categories red, yellow, and blue, and sets the category of the rows that do not belong to those categories to 'others'. 3) 'categorical_column' : Uses all categories in categorical_column. If you use this argument, you must also specify each categorical_column in the input.column argument.",
      "alternateNames": [],
      "allowedTypeGroups": [
        "ALL"
      ],
      "allowPadding": true,
      "matchLengthOfArgument": "",
      "description": "Specifies the names of the input_table columns that contain categorical variables, and which of their categories to use in the model. Default behavior: The function treats all variables as numerical. Each categorical_column_and_categories has one of these formats:  1) 'categorical_column:max_cardinality' : Uses the most common categories in categorical_column and groups the other categories into the category 'others'. For example, 'column_a:3' specifies that for column_a, the function uses the 3 most common categories and sets the category of the rows that do not belong to those 3 categories to 'others'.  2) 'categorical_column:(category [,...])' : Uses the specified categories of categorical_column and groups the other categories into the category 'others'. For example, 'column_a : (red, yellow, blue)' specifies that for column_a, the function uses the categories red, yellow, and blue, and sets the category of the rows that do not belong to those categories to 'others'. 3) 'categorical_column' : Uses all categories in categorical_column. If you use this argument, you must also specify each categorical_column in the InputColumns argument."
    },
    {
      "name": "WeightColumn",
      "allowsLists": false,
      "useInR": true,
      "rName": "weight.column",
      "allowedTypes": [],
      "datatype": "COLUMN_NAMES",
      "targetTable": [
        "InputTable"
      ],
      "rOrderNum": 2,
      "checkDuplicate": true,
      "isRequired": false,
      "rDescription": "Specifies the name of the input table column that contains the weights to assign to responses. Default: 1. You can use non-NULL weights to indicate that different observations have different dispersions (with the weights being inversely proportional to the dispersions). Equivalently, when the weights are positive integers wi, each response yi is the mean of wi unit-weight observations. A binomial GLM uses prior weights to give the number of trials when the response.column is the proportion of successes. A Poisson GLM rarely uses weights. If the weight is less than the response value, the function throws an exception. Therefore, if the response.column value is greater than 1 (the default weight), you must specify a weight that is greater than or equal to the response.column value.",
      "requiredLength": 1,
      "alternateNames": [],
      "allowedTypeGroups": [
        "NUMERIC"
      ],
      "allowPadding": true,
      "matchLengthOfArgument": "",
      "description": "Specifies the name of the input_table column that contains the weights to assign to responses. Default: 1. You can use non-NULL weights to indicate that different observations have different dispersions (with the weights being inversely proportional to the dispersions). Equivalently, when the weights are positive integers wi, each response yi is the mean of wi unit-weight observations. A binomial GLM uses prior weights to give the number of trials when the response is the proportion of successes. A Poisson GLM rarely uses weights. If the weight is less than the response value, the function throws an exception. Therefore, if the response value is greater than 1 (the default weight), you must specify a weight that is greater than or equal to the response value."
    },
    {
      "name": "Family",
      "allowsLists": false,
      "isOutputColumn": false,
      "useInR": true,
      "datatype": "STRING",
      "defaultValue": "GAUSSIAN",
      "rOrderNum": 3,
      "rName": "family",
      "isRequired": false,
      "rDescription": "Specifies the distribution exponential family. Default: 'GAUSSIAN'.",
      "alternateNames": [],
      "permittedValues": [
        "GAUSSIAN",
        "BINOMIAL",
        "POISSON"
      ],
      "description": "Specifies the distribution exponential family. Default: 'GAUSSIAN'."
    },
    {
      "name": "Lambda",
      "allowsLists": true,
      "lowerBound": 0,
      "useInR": true,
      "datatype": "DOUBLE",
      "rOrderNum": 4,
      "rName": "lambda",
      "lowerBoundType": "INCLUSIVE",
      "isRequired": false,
      "rDescription": "Disallowed if num.lambdas is specified. Specifies the regularization parameter sequence. Each lambda must be a nonnegative DOUBLE PRECISION value. A value of zero disables regularization. Default behavior: The function computes the regularization parameter sequence using the num.lambdas and min.lambda.ratio argument values.",
      "alternateNames": [],
      "allowPadding": true,
      "matchLengthOfArgument": "",
      "description": "Disallowed if NumLambdas is specified. Specifies the regularization parameter sequence. Each lambda must be a nonnegative DOUBLE PRECISION value. A value of zero disables regularization. Default behavior: The function computes the regularization parameter sequence using the NumLambdas and MinLambdaRatio argument values."
    },
    {
      "name": "NumLambdas",
      "upperBoundType": "INCLUSIVE",
      "lowerBound": 1,
      "useInR": true,
      "rName": "num.lambdas",
      "datatype": "INTEGER",
      "defaultValue": 100,
      "rOrderNum": 5,
      "allowsLists": false,
      "upperBound": 10000,
      "lowerBoundType": "INCLUSIVE",
      "isRequired": false,
      "rDescription": "Required if Lambda is omitted, otherwise disallowed. Specifies the number of lambda values in the regularization parameter sequence. The num.lambdas must be a positive INTEGER. Default: 100. Maximum: 10,000. The function uses num.lambdas and min.lambda.ratio to compute the regularization parameter sequence.",
      "alternateNames": [],
      "allowNaN": false,
      "description": "Required if Lambda is omitted, otherwise disallowed. Specifies the number of lambda values in the regularization parameter sequence. The num_lambdas must be a positive INTEGER. Default: 100. Maximum: 10,000. The function uses num_lambdas and min_lambda_ratio to compute the regularization parameter sequence."
    },
    {
      "name": "MinLambdaRatio",
      "upperBoundType": "EXCLUSIVE",
      "lowerBound": 0,
      "useInR": true,
      "rName": "min.lambda.ratio",
      "datatype": "DOUBLE",
      "allowNaN": false,
      "rOrderNum": 6,
      "allowsLists": false,
      "upperBound": 1,
      "lowerBoundType": "INCLUSIVE",
      "isRequired": false,
      "rDescription": "Required if Lambda is omitted, otherwise disallowed. Specifies the minimum lambda value in the regularization parameter sequence (MinLambda) as a fraction of the maximum lambda value in the regularization parameter sequence (MaxLambda). The min.lambda.ratio must be in [0, 1). Default: 0.05 if the number of rows (observations) in the input data set is less than the number of predictors (independent variables), otherwise 0.0001. To calculate the value of MaxLambda, the function uses the input data set. To calculate the value of MinLambda, the function uses this formula: MinLambda = MaxLambda * min.lambda.ratio; To calculate the step for decreasing the lambda value from maximun lambda to minimum lambda, the function uses this formula: min.lambda.ratio^(1/(num.lambdas-1)).",
      "alternateNames": [],
      "description": "Required if Lambda is omitted, otherwise disallowed. Specifies the minimum lambda value in the regularization parameter sequence (MinLambda) as a fraction of the maximum lambda value in the regularization parameter sequence (MaxLambda). The min_lambda_ratio must be in [0, 1). Default: 0.05 if the number of rows (observations) in the input data set is less than the number of predictors (independent variables), otherwise 0.0001. To calculate the value of MaxLambda, the function uses the input data set. To calculate the value of MinLambda, the function uses this formula: MinLambda = MaxLambda * min_lambda_ratio; To calculate the step for decreasing the lambda value from MaxLambda to MinLambda, the function uses this formula: min_lambda_ratio^(1/(num_lambdas-1))."
    },
    {
      "name": "Alpha",
      "upperBoundType": "INCLUSIVE",
      "lowerBound": 0,
      "useInR": true,
      "rName": "alpha",
      "datatype": "DOUBLE",
      "defaultValue": 0.1,
      "rOrderNum": 7,
      "allowsLists": false,
      "upperBound": 1,
      "lowerBoundType": "INCLUSIVE",
      "isRequired": false,
      "rDescription": "Specifies the mixing parameter for penalty computation. The alpha must be in [0, 1]. If alpha is in (0,1), it represents \u03b1 in the elastic net regularization formula in Background. Default: 0.1.",
      "alternateNames": [],
      "allowNaN": false,
      "description": "Specifies the mixing parameter for penalty computation. The alpha must be in [0, 1]. If alpha is in (0,1), it represents \u03b1 in the elastic net regularization formula in Background. Default: 0.1."
    },
    {
      "name": "Threshold",
      "upperBoundType": "INCLUSIVE",
      "lowerBound": 0,
      "useInR": true,
      "rName": "threshold",
      "datatype": "DOUBLE",
      "defaultValue": 1e-07,
      "rOrderNum": 8,
      "allowsLists": false,
      "upperBound": Infinity,
      "lowerBoundType": "EXCLUSIVE",
      "isRequired": false,
      "rDescription": "Specifies the convergence threshold of coordinate descent. The threshold must be a nonnegative DOUBLE PRECISION value. Default: 1.0e-7.",
      "alternateNames": [],
      "allowNaN": false,
      "description": "Specifies the convergence threshold of coordinate descent. The threshold must be a nonnegative DOUBLE PRECISION value. Default: 1.0e-7."
    },
    {
      "name": "MaxIterNum",
      "upperBoundType": "INCLUSIVE",
      "lowerBound": 0,
      "useInR": true,
      "rName": "max.iter.num",
      "datatype": "INTEGER",
      "defaultValue": 100000,
      "rOrderNum": 9,
      "allowsLists": false,
      "upperBound": 2147483647,
      "lowerBoundType": "EXCLUSIVE",
      "isRequired": false,
      "rDescription": "Specifies the maximum number of iterations over the data for all lambda values. The parameter max_iterations must be a positive INTEGER value. Default: 100000.",
      "alternateNames": [],
      "allowNaN": false,
      "description": "Specifies the maximum number of iterations over the data for all lambda values. The parameter max_iterations must be a positive INTEGER value. Default: 100000."
    },
    {
      "name": "Intercept",
      "allowsLists": false,
      "useInR": true,
      "datatype": "BOOLEAN",
      "defaultValue": true,
      "rOrderNum": 10,
      "rName": "intercept",
      "isRequired": false,
      "rDescription": "Specifies whether the function uses an intercept. For example, in \u03b20+\u03b21*X1+\u03b22*X2+ ....+ \u03b2pXp, the intercept is \u03b20. Default: 'true'.",
      "alternateNames": [],
      "description": "Specifies whether the function uses an intercept. For example, in \u03b20+\u03b21*X1+\u03b22*X2+ ....+ \u03b2pXp, the intercept is \u03b20. Default: 'true'."
    }
  ]
}