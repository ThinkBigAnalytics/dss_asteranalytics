{
  "json_schema_major_version": "1",
  "json_schema_minor_version": "2",
  "json_content_version": "1",
  "function_name": "Basket_Generator",
  "function_version": "1.4",
  "function_type": "non-driver",
  "function_r_name": "aa.basket.generator",
  "short_description": "This function generates combinations of basket items  ",
  "long_description": "This function is a part of association analysis used for mining interesting baskets and also for trends over time and compare attributes",
  "input_tables": [
    {
      "isOrdered": false,
      "useInR": true,
      "name": "input",
      "rName": "data",
      "isRequired": true,
      "datatype": "TABLE_ALIAS",
      "rOrderNum": 1,
      "allowsLists": false,
      "partitionByOne": false,
      "rDescription": "Input table that contains basket information.",
      "requiredInputKind": [
        "PartitionByKey"
      ],
      "alternateNames": [],
      "description": "Input table that contains basket information."
    }
  ],
  "argument_clauses": [
    {
      "name": "BasketItem",
      "allowsLists": true,
      "useInR": true,
      "rName": " basket.item",
      "allowedTypes": [],
      "datatype": "COLUMNS",
      "targetTable": [
        "input"
      ],
      "rOrderNum": 2,
      "checkDuplicate": true,
      "isRequired": true,
      "rDescription": "Specifies the names of the input columns that contain the items to be collected into baskets. If you specify multiple columns, the function treats every unique combination of column values as one item. For example, you could specify only the column that contains the stock keeping unit (SKU) that identifies an item that was sold. Alternatively, you could specify the SKU column and the columns that contain the month manufactured, color and size.",
      "alternateNames": [],
      "allowedTypeGroups": [
        "ALL"
      ],
      "allowPadding": true,
      "matchLengthOfArgument": "",
      "description": "Specifies the names of the input columns that contain the items to be collected into baskets. If you specify multiple columns, the function treats every unique combination of column values as one item. For example, you could specify only the column that contains the stock keeping unit (SKU) that identifies an item that was sold. Alternatively, you could specify the SKU column and the columns that contain the month manufactured, color and size."
    },
    {
      "name": "Accumulate",
      "allowsLists": true,
      "useInR": true,
      "rName": "accumulate",
      "allowedTypes": [],
      "datatype": "COLUMNS",
      "targetTable": [
        "input"
      ],
      "rOrderNum": 6,
      "checkDuplicate": true,
      "isRequired": false,
      "rDescription": "Specifies the names of the input columns to copy to the output table. Each accumulate_column must be a partition_column; otherwise, the function is nondeterministic. However, not every partition_column must be an accumulate_column.",
      "alternateNames": [],
      "allowedTypeGroups": [
        "ALL"
      ],
      "allowPadding": true,
      "matchLengthOfArgument": "",
      "description": "Specifies the names of the input columns to copy to the output table. Each accumulate_column must be a partition_column; otherwise, the function is nondeterministic. However, not every partition_column must be an accumulate_column."
    },
    {
      "name": "BasketSize",
      "upperBoundType": "INCLUSIVE",
      "lowerBound": 2,
      "useInR": true,
      "rName": "basket.size",
      "datatype": "INTEGER",
      "defaultValue": 2,
      "rOrderNum": 3,
      "allowsLists": false,
      "upperBound": 2147483647,
      "lowerBoundType": "INCLUSIVE",
      "isRequired": false,
      "rDescription": " Specifies the number of items to be included in a basket (an INTEGER value). The default value is 2.",
      "alternateNames": [],
      "allowNaN": false,
      "description": " Specifies the number of items to be included in a basket (an INTEGER value). The default value is 2."
    },
    {
      "name": "MaxItems",
      "upperBoundType": "INCLUSIVE",
      "lowerBound": 0,
      "useInR": true,
      "rName": "max.items",
      "datatype": "INTEGER",
      "defaultValue": 100,
      "rOrderNum": 4,
      "allowsLists": false,
      "upperBound": 2147483647,
      "lowerBoundType": "INCLUSIVE",
      "isRequired": false,
      "rDescription": "Specifies the maximum number of items in a partition (an INTEGER value). If the number of items in a partition exceeds item_set_max, then the function ignores that partition. The default value is 100.",
      "alternateNames": [
        "ItemSetMax"
      ],
      "allowNaN": false,
      "description": "Specifies the maximum number of items in a partition (an INTEGER value). If the number of items in a partition exceeds item_set_max, then the function ignores that partition. The default value is 100."
    },
    {
      "name": "Combination",
      "allowsLists": false,
      "useInR": true,
      "datatype": "BOOLEAN",
      "defaultValue": true,
      "rOrderNum": 5,
      "rName": "combination",
      "isRequired": false,
      "rDescription": "Specifies whether the function returns a basket for each unique combination of items. The default value is 'true'. If you specify 'false', then the function returns a basket for each unique permutation of items. In a combination, item order is irrelevant. For example, the baskets \"tomatoes and basil\" and \"basil and tomatoes\" are equivalent. In a permutation, item order is relevant. For example, the baskets \"tomatoes and basil\" and \"basil and tomatoes\" are not equivalent. The function returns combinations and permutations in lexicographical order",
      "alternateNames": [
        "Combinations"
      ],
      "description": "Specifies whether the function returns a basket for each unique combination of items. The default value is 'true'. If you specify 'false', then the function returns a basket for each unique permutation of items. In a combination, item order is irrelevant. For example, the baskets \"tomatoes and basil\" and \"basil and tomatoes\" are equivalent. In a permutation, item order is relevant. For example, the baskets \"tomatoes and basil\" and \"basil and tomatoes\" are not equivalent. The function returns combinations and permutations in lexicographical order"
    }
  ]
}