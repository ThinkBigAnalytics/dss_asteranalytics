{
  "json_schema_major_version": "1",
  "json_schema_minor_version": "2",
  "json_content_version": "1",
  "function_name": "IPGeo",
  "function_version": "2.2",
  "function_type": "non-driver",
  "function_r_name": "aa.ipgeo",
  "short_description": "SQL/MR function to convert ip address to geolocation information.",
  "long_description": "SQL/MR function to convert ip address to geolocation information.",
  "input_tables": [
    {
      "isOrdered": false,
      "useInR": true,
      "name": "input",
      "rName": "data",
      "isRequired": true,
      "datatype": "TABLE_ALIAS",
      "rOrderNum": 1,
      "allowsLists": false,
      "partitionByOne": false,
      "rDescription": "The input table contains the ip addresses.",
      "requiredInputKind": [
        "PartitionByAny"
      ],
      "alternateNames": [],
      "description": "The input table contains the ip addresses."
    }
  ],
  "argument_clauses": [
    {
      "name": "IpAddressColumn",
      "allowsLists": false,
      "useInR": true,
      "rName": "ipaddress.column",
      "allowedTypes": [],
      "datatype": "COLUMNS",
      "targetTable": [
        "input"
      ],
      "rOrderNum": 2,
      "checkDuplicate": true,
      "isRequired": true,
      "rDescription": "Specifies the name of the input table column that contains the IP addresses.",
      "requiredLength": 1,
      "alternateNames": [],
      "allowedTypeGroups": [
        "ALL"
      ],
      "allowPadding": true,
      "matchLengthOfArgument": "",
      "description": "Specifies the name of the input table column that contains the IP addresses."
    },
    {
      "name": "Accumulate",
      "allowsLists": true,
      "useInR": true,
      "rName": "accumulate",
      "allowedTypes": [],
      "datatype": "COLUMNS",
      "targetTable": [
        "input"
      ],
      "rOrderNum": 5,
      "checkDuplicate": true,
      "isRequired": false,
      "rDescription": "Specifies the names of input table columns to copy to the output table.",
      "alternateNames": [],
      "allowedTypeGroups": [
        "ALL"
      ],
      "allowPadding": true,
      "matchLengthOfArgument": "",
      "description": "Specifies the names of input table columns to copy to the output table."
    },
    {
      "name": "Converter",
      "allowsLists": true,
      "isOutputColumn": false,
      "useInR": true,
      "datatype": "STRING",
      "rOrderNum": 3,
      "rName": "converter",
      "isRequired": false,
      "rDescription": "The JAR filename and the name of the class that converts the IP address to location information. The JAR file must be installed on the Aster Database and the class name must be the full name, which includes the package information. The file and class parameters are case-sensitive. The ta.ipgeo function is a special case and needs a user-defined class. This is why you need to use the converter argument. Only the JAR file declared by this argument can be used by the function. The JAR file should contain all the classes needed by the user-defined converter. In Aster Database, all of the installed files are stored in the database. When a function is invoked, only a ZIP/JAR file consistent with the SQL-MapReduce function name is temporally downloaded to the file system to be executed. ",
      "requiredLength": 2,
      "alternateNames": [],
      "permittedValues": [],
      "allowPadding": false,
      "matchLengthOfArgument": "",
      "description": "The JAR filename and the name of the class that converts the IP address to location information. The JAR file must be installed on the Aster Database and the class name must be the full name, which includes the package information. The file and class parameters are case-sensitive. The IPGeo function is a special case and needs a user-defined class. This is why you need to use the Converter argument. Only the JAR file declared by this argument can be used by the function. The JAR file should contain all the classes needed by the user-defined converter. In Aster Database, all of the installed files are stored in the database. When a function is invoked, only a ZIP/JAR file consistent with the SQL-MapReduce function name is temporally downloaded to the file system to be executed. "
    },
    {
      "name": "IpDatabaseLocation",
      "allowsLists": false,
      "isOutputColumn": false,
      "useInR": true,
      "datatype": "STRING",
      "rOrderNum": 4,
      "rName": "ipdatabase.location",
      "isRequired": false,
      "rDescription": "The location of the IP database that matches IP addresses to locations. The IP databases can be stored in the file system or in Aster Database. If the data is stored in a file system, each worker must have the same path, and the absolute path must be set in this parameter. If the data is installed in Aster Database, this argument is ignored.",
      "alternateNames": [],
      "permittedValues": [],
      "description": "The location of the IP database that matches IP addresses to locations. The IP databases can be stored in the file system or in Aster Database. If the data is stored in a file system, each worker must have the same path, and the absolute path must be set in this parameter. If the data is installed in Aster Database, this argument is ignored."
    }
  ]
}