{
  "json_schema_major_version": "1",
  "json_schema_minor_version": "2",
  "json_content_version": "1",
  "function_name": "RandomSample",
  "function_version": "1.1",
  "function_type": "driver",
  "function_r_name": "aa.random.sample",
  "short_description": "This function samples a table and returns a fixed number of rows.",
  "long_description": "This function samples a table and returns a fixed number of rows.",
  "argument_clauses": [
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "name": "Domain",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "The address of the Queen. The host parameter is the Aster Database Queen’s IP address or hostname.",
      "description": "The address of the Queen. The host parameter is the Aster Database Queen’s IP address or hostname.",
      "datatype": "DRIVER",
      "allowsLists": false,
      "useInR": false,
      "rOrderNum": 0
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "name": "Database",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "The name of the database where the input table is located.",
      "description": "The name of the database where the input table is located.",
      "datatype": "DRIVER",
      "allowsLists": false,
      "useInR": false,
      "rOrderNum": 0
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "name": "UserId",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "The Aster Database user name of the user running this function.",
      "description": "The Aster Database user name of the user running this function.",
      "datatype": "DRIVER",
      "allowsLists": false,
      "useInR": false,
      "rOrderNum": 0
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "name": "Password",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "The Aster Database password of the user.",
      "description": "The Aster Database password of the user.",
      "datatype": "DRIVER",
      "allowsLists": false,
      "useInR": false,
      "rOrderNum": 0
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "name": "SSLSettings",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "A string that includes all the SSL settings, except the password for the truststore.",
      "description": "A string that includes all the SSL settings, except the password for the truststore.",
      "datatype": "DRIVER",
      "allowsLists": false,
      "useInR": false,
      "rOrderNum": 0
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "name": "SSLTrustStorePassword",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "The password for the SSL truststore.",
      "description": "The password for the SSL truststore.",
      "datatype": "DRIVER",
      "allowsLists": false,
      "useInR": false,
      "rOrderNum": 0
    },
    {
      "isOutputTable": false,
      "name": "InputTable",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": "Specifies the name of the table that contains the data set from which to take samples.",
      "description": "Specifies the name of the table that contains the data set from which to take samples.",
      "datatype": "TABLE_NAME",
      "allowsLists": false,
      "rName": "data",
      "useInR": true,
      "rOrderNum": 1
    },
    {
      "targetTable": [
        "InputTable"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "NUMERIC"
      ],
      "requiredLength": 1,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "WeightColumn",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the name of the input_table column that contains weights for weighted sampling. The weight_column must have a numeric SQL data type. By default, rows have equal weight.",
      "description": "Specifies the name of the input_table column that contains weights for weighted sampling. The weight_column must have a numeric SQL data type. By default, rows have equal weight.",
      "datatype": "COLUMN_NAMES",
      "allowsLists": false,
      "rName": "weight.column",
      "useInR": true,
      "rOrderNum": 3
    },
    {
      "targetTable": [
        "InputTable"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "ALL"
      ],
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "InputColumns",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "For ta.kmeans++ and ta.kmeans|| sampling, specifies the names of the input_table columns to use to calculate the distance between numerical variables.",
      "description": "For KMeans++ and KMeans|| sampling, specifies the names of the input_table columns to use to calculate the distance between numerical variables.",
      "datatype": "COLUMN_NAMES",
      "allowsLists": true,
      "rName": "input.columns",
      "useInR": true,
      "rOrderNum": 6
    },
    {
      "targetTable": [
        "InputTable"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "ALL"
      ],
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "AsCategories",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "For ta.kmeans++ and ta.kmeans|| sampling, specifies the names of the input_table columns that contain numerical variables to treat as categorical variables.",
      "description": "For KMeans++ and KMeans|| sampling, specifies the names of the input_table columns that contain numerical variables to treat as categorical variables.",
      "datatype": "COLUMN_NAMES",
      "allowsLists": true,
      "rName": "as.categories",
      "useInR": true,
      "rOrderNum": 7
    },
    {
      "targetTable": [
        "InputTable"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "GROUPTYPE"
      ],
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "SeedColumn",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": " Specifies the names of the input_table columns by which to partition the input. Function calls that use the same input data, seed, and seed_column output the same result. If you specify seed.column, you must also specify seed. Note: Ideally, the number of distinct values in the seed_column is the same as the number of workers in the cluster. A very large number of distinct values in the seed_column degrades function performance.",
      "description": "Specifies the names of the input_table columns by which to partition the input. Function calls that use the same input data, seed, and seed_column output the same result. If you specify SeedColumn, you must also specify Seed. Note: Ideally, the number of distinct values in the seed_column is the same as the number of workers in the cluster. A very large number of distinct values in the seed_column degrades function performance.",
      "datatype": "COLUMN_NAMES",
      "allowsLists": true,
      "rName": "seed.column",
      "useInR": true,
      "rOrderNum": 11
    },
    {
      "lowerBound": 0,
      "lowerBoundType": "EXCLUSIVE",
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "NumSample",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": "Specifies both the number of samples and their sizes. For each sample_size (an INTEGER value), the function selects a sample that has sample_size rows.",
      "description": "Specifies both the number of samples and their sizes. For each sample_size (an INTEGER value), the function selects a sample that has sample_size rows.",
      "datatype": "INTEGER",
      "allowsLists": true,
      "rName": " num.sample",
      "useInR": true,
      "rOrderNum": 2
    },
    {
      "permittedValues": [
        "Basic",
        "KMeans++",
        "KMeans||"
      ],
      "defaultValue": "Basic",
      "isOutputColumn": false,
      "name": "SamplingMode",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the sampling mode: 'basic' (default): Each input_table row has a probability of being selected that is proportional to its weight. The weight of each row is in weight_column.  'kmeans++': One row is selected in each of k iterations, where k is the number of desired output rows. The first row is selected randomly. In subsequent iterations, the probability of a row being selected is proportional to the value in the weight.column multiplied by the distance from the nearest row in the set of selected rows. The distance is calculated using the methods specified by the distance and categorical.distance arguments.  'kmeans||': Enhanced version of ta.kmeans++ that exploits parallel architecture to accelerate the sampling process. The algorithm is described in the paper Scalable ta.kmeans++ by Bahmani et al (http://theory.stanford.edu/~sergei/papers/vldb12-kmpar.pdf). Briefly, at each iteration, the probability that a row is selected is proportional to the value in the weight.column multiplied by the distance from the nearest row in the set of selected rows (as in ta.kmeans++). However, the ta.kmeans|| algorithm oversamples at each iteration, significantly reducing the required number of iterations; therefore, the resulting set of rows might have more than k data points. Each row in the resulting set is then weighted by the number of rows in the table that are closer to that row than to any other selected row, and the rows are clustered to produce exactly k rows. Tip: For optimal performance, use 'kmeans++' when the desired sample size is less than 15 and 'kmeans||' otherwise.",
      "description": "Specifies the sampling mode:  'basic' (default): Each input_table row has a probability of being selected that is proportional to its weight. The weight of each row is in weight_column.  'kmeans++': One row is selected in each of k iterations, where k is the number of desired output rows. The first row is selected randomly. In subsequent iterations, the probability of a row being selected is proportional to the value in the Weight Columnmultiplied by the distance from the nearest row in the set of selected rows. The distance is calculated using the methods specified by the Distance and CategoricalDistance arguments.  'kmeans||': Enhanced version of KMeans++ that exploits parallel architecture to accelerate the sampling process. The algorithm is described in the paper Scalable KMeans++ by Bahmani et al (http://theory.stanford.edu/~sergei/papers/vldb12-kmpar.pdf). Briefly, at each iteration, the probability that a row is selected is proportional to the value in the WeightColumn multiplied by the distance from the nearest row in the set of selected rows (as in KMeans++). However, the KMeans|| algorithm oversamples at each iteration, significantly reducing the required number of iterations; therefore, the resulting set of rows might have more than k data points. Each row in the resulting set is then weighted by the number of rows in the table that are closer to that row than to any other selected row, and the rows are clustered to produce exactly k rows. Tip: For optimal performance, use 'kmeans++' when the desired sample size is less than 15 and 'kmeans||' otherwise.",
      "datatype": "STRING",
      "allowsLists": false,
      "rName": "sampling.mode",
      "useInR": true,
      "rOrderNum": 4
    },
    {
      "permittedValues": [
        "MANHATTAN",
        "EUCLIDEAN"
      ],
      "defaultValue": "EUCLIDEAN",
      "isOutputColumn": false,
      "name": "Distance",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "For ta.kmeans++ and ta.kmeans|| sampling, specifies the function for computing the distance between numerical variables:  'euclidean' (default): The distance between two variables is defined in “Euclidean Distance”, 'manhattan': The distance beween two variables is defined in “Manhattan Distance”  ",
      "description": "For KMeans++ and KMeans|| sampling, specifies the function for computing the distance between numerical variables:  'euclidean' (default): The distance between two variables is defined in “Euclidean Distance”, 'manhattan': The distance beween two variables is defined in “Manhattan Distance”  ",
      "datatype": "STRING",
      "allowsLists": false,
      "rName": "distance",
      "useInR": true,
      "rOrderNum": 5
    },
    {
      "permittedValues": [
        "OVERLAP",
        "HAMMING"
      ],
      "defaultValue": "OVERLAP",
      "isOutputColumn": false,
      "name": "CategoricalDistance",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "For ta.kmeans++ and ta.kmeans|| sampling, specifies the function for computing the distance between categorical variables:  'overlap' (default): The distance between two variables is 0 if they are the same and 1 if they are different.  'hamming': The distance beween two variables is the Hamming distance between thestrings that represent them. The strings must have equal length.",
      "description": "For KMeans++ and KMeans|| sampling, specifies the function for computing the distance between categorical variables:  'overlap' (default): The distance between two variables is 0 if they are the same and 1 if they are different.  'hamming': The distance beween two variables is the Hamming distance between the strings that represent them. The strings must have equal length.",
      "datatype": "STRING",
      "allowsLists": false,
      "rName": "categorical.distance",
      "useInR": true,
      "rOrderNum": 9
    },
    {
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "CategoryWeights",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "For ta.kmeans++ and ta.kmeans|| sampling, specifies the weights (DOUBLE PRECISION values) of the categorical variables, including those that the as.categories argument specifies. Specify the weights in the order (from left to right) that the variables appear in the input table. When calculating the distance between two rows, distances between categorical values are scaled by these weights.",
      "description": "For KMeans++ and KMeans|| sampling, specifies the weights (DOUBLE PRECISION values) of the categorical variables, including those that the AsCategories argument specifies. Specify the weights in the order (from left to right) that the variables appear in the input table. When calculating the distance between two rows, distances between categorical values are scaled by these weights.",
      "datatype": "DOUBLE",
      "allowsLists": true,
      "rName": "category.weights",
      "useInR": true,
      "rOrderNum": 8
    },
    {
      "lowerBound": -9223372036854775808,
      "upperBound": 9223372036854775807,
      "lowerBoundType": "INCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "Seed",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the random seed with which to initialize the algorithm (a LONG value). If you specify Seed, you must also specify SeedColumn.",
      "description": "Specifies the random seed with which to initialize the algorithm (a LONG value). If you specify Seed, you must also specify SeedColumn.",
      "datatype": "LONG",
      "allowsLists": false,
      "rName": "seed",
      "useInR": true,
      "rOrderNum": 10
    },
    {
      "defaultValue": 1,
      "lowerBound": 0,
      "upperBound": Infinity,
      "lowerBoundType": "EXCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "OverSamplingRate",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "For ta.kmeans|| sampling, specifies the oversampling rate (a DOUBLE PRECISION value greater than 0.0). The function multiplies rate by sample_size (for each sample_size). The default rate is 1.0.",
      "description": "For KMeans|| sampling, specifies the oversampling rate (a DOUBLE PRECISION value greater than 0.0). The function multiplies rate by sample_size (for each sample_size). The default rate is 1.0.",
      "datatype": "DOUBLE",
      "allowsLists": false,
      "rName": "over.sampling.rate",
      "useInR": true,
      "rOrderNum": 12
    },
    {
      "defaultValue": 5,
      "lowerBound": 0,
      "upperBound": 2147483647,
      "lowerBoundType": "EXCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "IterationNum",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "For ta.kmeans|| sampling, specifies the number of iterations (an INTEGER value greater than 0). The default number_of_iterations is 5.",
      "description": "For KMeans|| sampling, specifies the number of iterations (an INTEGER value greater than 0). The default number_of_iterations is 5.",
      "datatype": "INTEGER",
      "allowsLists": false,
      "rName": "iteration.num",
      "useInR": true,
      "rOrderNum": 13
    }
  ]
}
