{
  "json_schema_major_version": "1",
  "json_schema_minor_version": "2",
  "json_content_version": "1",
  "function_name": "Forest_Drive",
  "function_version": "1.7",
  "function_type": "driver",
  "function_r_name": "aa.forest",
  "short_description": "This function trains a random forest tree model.",
  "long_description": "This function takes as input a training set of data and uses it to generate a predictive model.",
  "argument_clauses": [
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "name": "Domain",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "The address of the Queen. The host parameter is the Aster Database Queen’s IP address or hostname.",
      "description": "The address of the Queen. The host parameter is the Aster Database Queen’s IP address or hostname.",
      "datatype": "DRIVER",
      "allowsLists": false,
      "useInR": false,
      "rOrderNum": 0
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "name": "Database",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "The name of the database where the input table is located.",
      "description": "The name of the database where the input table is located.",
      "datatype": "DRIVER",
      "allowsLists": false,
      "useInR": false,
      "rOrderNum": 0
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "name": "UserId",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "The Aster Database user name of the user running this function.",
      "description": "The Aster Database user name of the user running this function.",
      "datatype": "DRIVER",
      "allowsLists": false,
      "useInR": false,
      "rOrderNum": 0
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "name": "Password",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "The Aster Database password of the user.",
      "description": "The Aster Database password of the user.",
      "datatype": "DRIVER",
      "allowsLists": false,
      "useInR": false,
      "rOrderNum": 0
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "name": "SSLSettings",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "A string that includes all the SSL settings, except the password for the truststore.",
      "description": "A string that includes all the SSL settings, except the password for the truststore.",
      "datatype": "DRIVER",
      "allowsLists": false,
      "useInR": false,
      "rOrderNum": 0
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "name": "SSLTrustStorePassword",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "The password for the SSL truststore.",
      "description": "The password for the SSL truststore.",
      "datatype": "DRIVER",
      "allowsLists": false,
      "useInR": false,
      "rOrderNum": 0
    },
    {
      "isOutputTable": false,
      "name": "InputTable",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": "Specifies the table containing the input data set.",
      "description": "Specifies the table containing the input data set.",
      "datatype": "TABLE_NAME",
      "allowsLists": false,
      "rName": "data",
      "useInR": true,
      "rOrderNum": 1
    },
    {
      "isOutputTable": true,
      "name": "OutputTable",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": "Specifies the name of the output table in which the function stores the predictive model that it generates.If a table with this name exists in the database, the function drops the existing table and creates a new table with the same name.",
      "description": "Specifies the name of the output table in which the function stores the predictive model that it generates.If a table with this name exists in the database, the function drops the existing table and creates a new table with the same name.",
      "datatype": "TABLE_NAME",
      "allowsLists": false,
      "rName": "predictive.model",
      "useInR": true,
      "rOrderNum": 100
    },
    {
      "isOutputTable": true,
      "defaultValue": "default_dt_monitor_table",
      "name": "MonitorTable",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the name of the table in which the function stores monitoring information. The default value is 'default_dt_monitor_table' in the current schema.",
      "description": "Specifies the name of the table in which the function stores monitoring information. The default value is 'default_dt_monitor_table' in the current schema.",
      "datatype": "TABLE_NAME",
      "allowsLists": false,
      "rName": "monitor.table",
      "useInR": true,
      "rOrderNum": 101
    },
    {
      "targetTable": [
        "InputTable"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "ALL"
      ],
      "requiredLength": 1,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "ResponseColumn",
      "alternateNames": [
        "Response"
      ],
      "isRequired": true,
      "rDescription": "Specifies the name of the column that contains the response variable. (that is, the quantity that you want to predict).",
      "description": "Specifies the name of the column that contains the response variable. (that is, the quantity that you want to predict).",
      "datatype": "COLUMN_NAMES",
      "allowsLists": false,
      "rName": "response.column ",
      "useInR": true,
      "rFormulaUsage": true,
      "rOrderNum": 0
    },
    {
      "targetTable": [
        "InputTable"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "NUMERIC"
      ],
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "NumericInputs",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the names of the columns that contain the numeric predictor variables (which must be numeric values).",
      "description": "Specifies the names of the columns that contain the numeric predictor variables (which must be numeric values).",
      "datatype": "COLUMN_NAMES",
      "allowsLists": true,
      "rName": "numeric.inputs",
      "useInR": true,
      "rFormulaUsage": true,
      "rOrderNum": -1
    },
    {
      "targetTable": [
        "InputTable"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "ALL"
      ],
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "CategoricalInputs",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the names of the columns that contain the categorical predictor variables (which can be either numeric or VARCHAR values). Each categorical input column can have at most max_cat_values distinct categorical values. If max_cat_values exceeds 20, the function might run out of memory, because classification trees grow rapidly as max_cat_values increases.",
      "description": "Specifies the names of the columns that contain the categorical predictor variables (which can be either numeric or VARCHAR values). Each categorical input column can have at most max_cat_values distinct categorical values. If max_cat_values exceeds 20, the function might run out of memory, because classification trees grow rapidly as max_cat_values increases.",
      "datatype": "COLUMN_NAMES",
      "allowsLists": true,
      "rName": "categorical.inputs",
      "useInR": true,
      "rFormulaUsage": true,
      "rOrderNum": -2
    },
    {
      "permittedValues": [],
      "isOutputColumn": false,
      "name": "TreeType",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies whether the analysis is a regression (continuous response variable) or a multiclass classification (predicting result from the number of classes). The default value is 'regression' if the response variable is numeric and 'classification' if the response variable is nonnumeric.",
      "description": "Specifies whether the analysis is a regression (continuous response variable) or a multiclass classification (predicting result from the number of classes). The default value is 'regression' if the response variable is numeric and 'classification' if the response variable is nonnumeric.",
      "datatype": "STRING",
      "allowsLists": false,
      "rName": "tree.type",
      "useInR": true,
      "rOrderNum": 3
    },
    {
      "lowerBound": 1,
      "upperBound": 2147483647,
      "lowerBoundType": "INCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "NumTrees",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the number of trees to grow in the forest model. When specified, number_of_trees must be greater than or equal to the number of vworkers.When not specified, the function builds the minimum number of trees that provides the input dataset with full coverage.",
      "description": "Specifies the number of trees to grow in the forest model. When specified, number_of_trees must be greater than or equal to the number of vworkers.When not specified, the function builds the minimum number of trees that provides the input dataset with full coverage.",
      "datatype": "INTEGER",
      "allowsLists": false,
      "rName": "ntree",
      "useInR": true,
      "rOrderNum": 4
    },
    {
      "lowerBound": 1,
      "upperBound": 2147483647,
      "lowerBoundType": "INCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "TreeSize",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the number of rows that each tree uses as its input data set. If not specified, the function builds a tree using either the number of rows on a vworker or the number of rows that fit into the vworker’s memory, whichever is less.",
      "description": "Specifies the number of rows that each tree uses as its input data set. If not specified, the function builds a tree using either the number of rows on a vworker or the number of rows that fit into the vworker’s memory, whichever is less.",
      "datatype": "INTEGER",
      "allowsLists": false,
      "rName": "tree.size",
      "useInR": true,
      "rOrderNum": 5
    },
    {
      "defaultValue": 1,
      "lowerBound": 1,
      "upperBound": 2147483647,
      "lowerBoundType": "INCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "MinNodeSize",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies a decision tree stopping criterion; the minimum size of any node within each decision tree The default value is 1.",
      "description": "Specifies a decision tree stopping criterion; the minimum size of any node within each decision tree The default value is 1.",
      "datatype": "INTEGER",
      "allowsLists": false,
      "rName": "nodesize",
      "useInR": true,
      "rOrderNum": 6
    },
    {
      "defaultValue": 0,
      "lowerBound": 0,
      "upperBound": Infinity,
      "lowerBoundType": "INCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "Variance",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies a decision tree stopping criterion. If the variance within any nodedips below this value, the algorithm stops looking for splits in the branch. The default value is 0.",
      "description": "Specifies a decision tree stopping criterion. If the variance within any nodedips below this value, the algorithm stops looking for splits in the branch. The default value is 0.",
      "datatype": "DOUBLE",
      "allowsLists": false,
      "rName": "variance",
      "useInR": true,
      "rOrderNum": 7
    },
    {
      "defaultValue": 12,
      "lowerBound": 1,
      "upperBound": 2147483647,
      "lowerBoundType": "INCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "MaxDepth",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies a decision tree stopping criterion. If the tree reaches a depth pastthis value, the algorithm stops looking for splits. Decision trees can grow to (2(max_depth+1) - 1) nodes. This stopping criteria has the greatest effect on the performance of the function. The default value is 12.",
      "description": "Specifies a decision tree stopping criterion. If the tree reaches a depth pastthis value, the algorithm stops looking for splits. Decision trees can grow to (2(max_depth+1) - 1) nodes. This stopping criteria has the greatest effect on the performance of the function. The default value is 12.",
      "datatype": "INTEGER",
      "allowsLists": false,
      "rName": "max.depth",
      "useInR": true,
      "rOrderNum": 8
    },
    {
      "defaultValue": 0,
      "lowerBound": 0,
      "upperBound": 2147483647,
      "lowerBoundType": "INCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "NumSurrogates",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the number of rows that each tree uses as its input data set.",
      "description": "Specifies the number of rows that each tree uses as its input data set.",
      "datatype": "INTEGER",
      "allowsLists": false,
      "rName": "num.surrogates",
      "useInR": true,
      "rOrderNum": 9
    },
    {
      "defaultValue": 20,
      "lowerBound": 0,
      "upperBound": 2147483647,
      "lowerBoundType": "EXCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "MaxNumCategoricalValues",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the maximum number of distinct values for a single categorical variable. The max_cat_values must be a positive INTEGER. The default value is 20. A max_cat_values greater than 20 is not recommended.",
      "description": "Specifies the maximum number of distinct values for a single categorical variable. The max_cat_values must be a positive INTEGER. The default value is 20. A max_cat_values greater than 20 is not recommended.",
      "datatype": "INTEGER",
      "allowsLists": false,
      "rName": "maxnum.categorical",
      "useInR": true,
      "rOrderNum": 2
    },
    {
      "defaultValue": true,
      "name": "DropMonitorTable",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies whether to drop the table specified by MonitorTable, if it exists. The default value is 'true'.",
      "description": "Specifies whether to drop the table specified by MonitorTable, if it exists. The default value is 'true'.",
      "datatype": "BOOLEAN",
      "allowsLists": false,
      "rName": "drop.monitor",
      "useInR": true,
      "rOrderNum": 10
    },
    {
      "lowerBound": 1,
      "upperBound": 2147483647,
      "lowerBoundType": "INCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "Mtry",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the number of variables to randomly sample from each inputvalue. For example, if mtry is 3, then the function randomly samples 3variables from each input at each split. The mtry must be an INTEGER.",
      "description": "Specifies the number of variables to randomly sample from each inputvalue. For example, if mtry is 3, then the function randomly samples 3variables from each input at each split. The mtry must be an INTEGER.",
      "datatype": "INTEGER",
      "allowsLists": false,
      "rName": "mtry",
      "useInR": true,
      "rOrderNum": 11
    },
    {
      "lowerBound": -9223372036854775808,
      "upperBound": 9223372036854775807,
      "lowerBoundType": "INCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "MtrySeed",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies a LONG value to use in determining the random seed for mtry",
      "description": "Specifies a LONG value to use in determining the random seed for mtry",
      "datatype": "LONG",
      "allowsLists": false,
      "rName": "mtry.seed",
      "useInR": true,
      "rOrderNum": 12
    },
    {
      "lowerBound": -9223372036854775808,
      "upperBound": 9223372036854775807,
      "lowerBoundType": "INCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "Seed",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies a LONG value to use in determining the seed for the random number generator. If you specify this value, you can specify the same value in future calls to this function and the function will build the same tree.",
      "description": "Specifies a LONG value to use in determining the seed for the random number generator. If you specify this value, you can specify the same value in future calls to this function and the function will build the same tree.",
      "datatype": "LONG",
      "allowsLists": false,
      "rName": "seed",
      "useInR": true,
      "rOrderNum": 13
    },
    {
      "defaultValue": false,
      "name": "OutOfBag",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies whether to output the out-of-bag estimate of error rate.",
      "description": "Specifies whether to output the out-of-bag estimate of error rate.",
      "datatype": "BOOLEAN",
      "allowsLists": false,
      "rName": "outofbag",
      "useInR": true,
      "rOrderNum": 14
    }
  ]
}
