{
  "json_schema_major_version": "1",
  "json_schema_minor_version": "2",
  "json_content_version": "1",
  "function_name": "nTree",
  "function_version": "1.1",
  "function_type": "non-driver",
  "function_r_name": "aa.ntree",
  "short_description": "The nTree function is a hierarchical analysis SQL-MR function that can build and traverse tree structures on all worker machines. The function reads the data only once from the disk and creates the trees in memory.",
  "long_description": "The nTree function is a hierarchical analysis SQL-MR function that can build and traverse tree structures on all worker machines. The function reads the data only once from the disk and creates the trees in memory.",
  "input_tables": [
    {
      "isOrdered": false,
      "useInR": true,
      "name": "input1",
      "rName": "data",
      "isRequired": true,
      "datatype": "TABLE_ALIAS",
      "rOrderNum": 1,
      "allowsLists": false,
      "partitionByOne": false,
      "rDescription": "input table",
      "requiredInputKind": [
        "PartitionByKey"
      ],
      "alternateNames": [],
      "description": "input table"
    }
  ],
  "argument_clauses": [
    {
      "name": "ROOT_NODE",
      "allowsLists": false,
      "isOutputColumn": false,
      "useInR": true,
      "datatype": "STRING",
      "rOrderNum": 2,
      "rName": "root.node",
      "isRequired": true,
      "rDescription": "Specifies the BOOLEAN SQL expression that defines the root nodes of the trees (for example, parent.id IS NULL).",
      "alternateNames": [],
      "permittedValues": [],
      "allowPadding": true,
      "matchLengthOfArgument": "",
      "description": "Specifies the BOOLEAN SQL expression that defines the root nodes of the trees (for example, parent_id IS NULL)."
    },
    {
      "name": "NODE_ID",
      "allowsLists": false,
      "isOutputColumn": false,
      "useInR": true,
      "datatype": "STRING",
      "rOrderNum": 3,
      "rName": "node.id",
      "isRequired": true,
      "rDescription": "Specifies the SQL expression whose value uniquely identifies a node in the input table (for example, order_id). \nNote: A node can appear multiple times in the data set, with different parents.",
      "alternateNames": [],
      "permittedValues": [],
      "allowPadding": true,
      "matchLengthOfArgument": "",
      "description": "Specifies the SQL expression whose value uniquely identifies a node in the input table (for example, order_id). \nNote: A node can appear multiple times in the data set, with different parents."
    },
    {
      "name": "PARENT_ID",
      "allowsLists": false,
      "isOutputColumn": false,
      "useInR": true,
      "datatype": "STRING",
      "rOrderNum": 4,
      "rName": "parent.id",
      "isRequired": true,
      "rDescription": "Specifies the SQL expression whose value identifies the parent node.",
      "alternateNames": [],
      "permittedValues": [],
      "allowPadding": true,
      "matchLengthOfArgument": "",
      "description": "Specifies the SQL expression whose value identifies the parent node."
    },
    {
      "name": "MODE",
      "allowsLists": false,
      "isOutputColumn": false,
      "useInR": true,
      "datatype": "STRING",
      "rOrderNum": 7,
      "rName": "mode",
      "isRequired": true,
      "rDescription": "Specifies the direction of tree traversal from the start node\u2014up to the root node or down to the leaf nodes.",
      "alternateNames": [],
      "permittedValues": [
        "UP",
        "DOWN"
      ],
      "allowPadding": true,
      "matchLengthOfArgument": "",
      "description": "Specifies the direction of tree traversal from the start node\u2014up to the root node or down to the leaf nodes."
    },
    {
      "name": "ALLOW_CYCLES",
      "allowsLists": false,
      "useInR": true,
      "datatype": "BOOLEAN",
      "defaultValue": false,
      "rOrderNum": 5,
      "rName": "allow.cycles",
      "isRequired": true,
      "rDescription": "Specifies whether trees can contain cycles. If not, a cycle in the data set causes the function to throw an exception. The default value is 'false'. For information about cycles, refer to \u201cCycles in ta.ntree\u201d",
      "alternateNames": [],
      "description": "Specifies whether trees can contain cycles. If not, a cycle in the data set causes the function to throw an exception. The default value is 'false'. For information about cycles, refer to \u201cCycles in nTree\u201d"
    },
    {
      "name": "STARTS_WITH",
      "allowsLists": false,
      "isOutputColumn": false,
      "useInR": true,
      "datatype": "STRING",
      "rOrderNum": 6,
      "rName": "starts.with",
      "isRequired": true,
      "rDescription": "Specifies the node from which to start tree traversal\u2014must be 'root', 'leaf ', or a SQL expression that identifies a node.",
      "alternateNames": [],
      "permittedValues": [],
      "allowPadding": true,
      "matchLengthOfArgument": "",
      "description": "Specifies the node from which to start tree traversal\u2014must be 'root', 'leaf ', or a SQL expression that identifies a node."
    },
    {
      "name": "OUTPUT",
      "allowsLists": false,
      "isOutputColumn": false,
      "useInR": true,
      "datatype": "STRING",
      "rOrderNum": 8,
      "rName": "output",
      "isRequired": true,
      "rDescription": "Specifies when to output a tuple\u2014at every node along the traversal path ('all') or only at the end of the traversal path ('end'). The default value is 'end'.",
      "alternateNames": [],
      "permittedValues": [
        "END",
        "ALL"
      ],
      "allowPadding": true,
      "matchLengthOfArgument": "",
      "description": "Specifies when to output a tuple\u2014at every node along the traversal path ('all') or only at the end of the traversal path ('end'). The default value is 'end'."
    },
    {
      "name": "MaxDistance",
      "allowsLists": false,
      "lowerBound": 1,
      "useInR": true,
      "datatype": "INTEGER",
      "defaultValue": 5,
      "rOrderNum": 9,
      "rName": "max.distance",
      "lowerBoundType": "INCLUSIVE",
      "isRequired": false,
      "rDescription": "Specifies the maximum tree depth. The default value is 5.",
      "alternateNames": [],
      "allowNaN": false,
      "description": "Specifies the maximum tree depth. The default value is 5."
    },
    {
      "name": "RESULT",
      "allowsLists": false,
      "isOutputColumn": false,
      "useInR": true,
      "datatype": "STRING",
      "rOrderNum": 11,
      "rName": "result",
      "isRequired": true,
      "rDescription": "Specifies aggregate operations to perform during tree traversal. The function reports the result of each aggregate operation in the output table. The syntax of aggregate is: \noperation (expression) [ ALIAS alias ] \noperation is either PATH, SUM, LEVEL, MAX, MIN, IS_CYCLE, AVG, or PROPAGATE. expression is a SQL expression. If operation is LEVEL or IS_CYCLE, then expression must be *. \nalias is the name of the output table column that contains the result of the operation. The default value is the string 'operation(expression)' without the quotation marks. For example, PATH(node_name). \nNote: The function ignores alias if it is the same as an input table column name. \nFor the path from the Starts_With node to the last traversed node, the operations do the following: \n PATH: Outputs the value of expression for each node, separating values with '->'. \n SUM: Computes the value of expression for each node and outputs the sum of these values. \n LEVEL: Outputs the number of hops. \n MAX: Computes the value of expression for each node and outputs the highest of these values. \n MIN: Computes the value of expression for each node and outputs the lowest of these values. \n IS_CYCLE: Outputs the cycle (if any). \n AVG: Computes the value of expression for each node and outputs the average of these values. \n PROPAGATE: Evaluates expression with the value of the starts.with node and propagates the result to every node.",
      "alternateNames": [],
      "permittedValues": [],
      "allowPadding": true,
      "matchLengthOfArgument": "",
      "description": "Specifies aggregate operations to perform during tree traversal. The function reports the result of each aggregate operation in the output table. The syntax of aggregate is: \noperation (expression) [ ALIAS alias ] \noperation is either PATH, SUM, LEVEL, MAX, MIN, IS_CYCLE, AVG, or PROPAGATE. expression is a SQL expression. If operation is LEVEL or IS_CYCLE, then expression must be *. \nalias is the name of the output table column that contains the result of the operation. The default value is the string 'operation(expression)' without the quotation marks. For example, PATH(node_name). \nNote: The function ignores alias if it is the same as an input table column name. \nFor the path from the Starts_With node to the last traversed node, the operations do the following: \n PATH: Outputs the value of expression for each node, separating values with '->'. \n SUM: Computes the value of expression for each node and outputs the sum of these values. \n LEVEL: Outputs the number of hops. \n MAX: Computes the value of expression for each node and outputs the highest of these values. \n MIN: Computes the value of expression for each node and outputs the lowest of these values. \n IS_CYCLE: Outputs the cycle (if any). \n AVG: Computes the value of expression for each node and outputs the average of these values. \n PROPAGATE: Evaluates expression with the value of the Starts_With node and propagates the result to every node."
    },
    {
      "name": "LOGGING",
      "allowsLists": false,
      "useInR": true,
      "datatype": "BOOLEAN",
      "defaultValue": false,
      "rOrderNum": 10,
      "rName": "logging",
      "isRequired": false,
      "rDescription": "Specifies whether the function prints log messages. The default value is 'false'.",
      "alternateNames": [],
      "description": "Specifies whether the function prints log messages. The default value is 'false'."
    }
  ]
}