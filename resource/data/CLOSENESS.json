{
  "json_schema_major_version": "1",
  "json_schema_minor_version": "2",
  "json_content_version": "1",
  "function_name": "Closeness",
  "function_version": "1.3",
  "function_type": "graph",
  "function_r_name": "aa.closeness",
  "short_description": "This function computes closeness and k-degree scores for each specified source vertex.",
  "long_description": "The function works on directed and undirected graphs to compute closeness and k-degree.",
  "input_tables": [
    {
      "isOrdered": false,
      "useInR": true,
      "name": "vertices",
      "rName": "vertices.data",
      "isRequired": true,
      "datatype": "TABLE_ALIAS",
      "rOrderNum": 1,
      "allowsLists": false,
      "partitionByOne": false,
      "rDescription": "vertex table",
      "requiredInputKind": [
        "PartitionByKey"
      ],
      "alternateNames": [],
      "description": "vertex table"
    },
    {
      "isOrdered": false,
      "useInR": true,
      "name": "edges",
      "rName": "edges.data",
      "isRequired": true,
      "datatype": "TABLE_ALIAS",
      "rOrderNum": 2,
      "allowsLists": false,
      "partitionByOne": false,
      "rDescription": "edge table",
      "requiredInputKind": [
        "PartitionByKey"
      ],
      "alternateNames": [],
      "description": "edge table"
    },
    {
      "isOrdered": false,
      "useInR": true,
      "name": "sources",
      "rName": "sources.data",
      "isRequired": false,
      "datatype": "TABLE_ALIAS",
      "rOrderNum": 4,
      "allowsLists": false,
      "partitionByOne": false,
      "rDescription": "source table",
      "requiredInputKind": [
        "PartitionByKey"
      ],
      "alternateNames": [],
      "description": "source table"
    },
    {
      "isOrdered": false,
      "useInR": true,
      "name": "targets",
      "rName": "targets.data",
      "isRequired": false,
      "datatype": "TABLE_ALIAS",
      "rOrderNum": 5,
      "allowsLists": false,
      "partitionByOne": false,
      "rDescription": "target table",
      "requiredInputKind": [
        "PartitionByKey"
      ],
      "alternateNames": [],
      "description": "target table"
    }
  ],
  "argument_clauses": [
    {
      "name": "TargetKey",
      "allowsLists": true,
      "useInR": true,
      "rName": "target.key",
      "allowedTypes": [],
      "datatype": "COLUMNS",
      "targetTable": [
        "edges"
      ],
      "rOrderNum": 3,
      "checkDuplicate": true,
      "isRequired": true,
      "rDescription": "Specifies the target key (the names of the edges table columns that identify the target vertex). If you specify targets_table, then the function uses only the vertices in targets_table as targets (which must be a subset of those that this argument specifies).",
      "alternateNames": [],
      "allowedTypeGroups": [
        "ALL"
      ],
      "allowPadding": true,
      "matchLengthOfArgument": "",
      "description": "Specifies the target key (the names of the edges table columns that identify the target vertex). If you specify targets_table, then the function uses only the vertices in targets_table as targets (which must be a subset of those that this argument specifies)."
    },
    {
      "name": "Accumulate",
      "allowsLists": true,
      "useInR": true,
      "rName": "accumulate",
      "allowedTypes": [],
      "datatype": "COLUMNS",
      "targetTable": [
        "vertices"
      ],
      "rOrderNum": 12,
      "checkDuplicate": true,
      "isRequired": false,
      "rDescription": "Specifies the names of the vertices table columns to copy to the output table.",
      "alternateNames": [],
      "allowedTypeGroups": [
        "ALL"
      ],
      "allowPadding": true,
      "matchLengthOfArgument": "",
      "description": "Specifies the names of the vertices table columns to copy to the output table."
    },
    {
      "name": "EdgeWeight",
      "allowsLists": false,
      "useInR": true,
      "rName": "edge.weight",
      "allowedTypes": [],
      "datatype": "COLUMNS",
      "targetTable": [
        "edges"
      ],
      "rOrderNum": 7,
      "checkDuplicate": true,
      "isRequired": false,
      "rDescription": "Specifies the name of the edges table column that contains edge weights. The weights are positive values. By default, the weight of each edge is 1 (that is, the graph is unweighted).",
      "requiredLength": 1,
      "alternateNames": [],
      "allowedTypeGroups": [
        "NUMERIC"
      ],
      "allowPadding": true,
      "matchLengthOfArgument": "",
      "description": "Specifies the name of the edges table column that contains edge weights. The weights are positive values. By default, the weight of each edge is 1 (that is, the graph is unweighted)."
    },
    {
      "name": "SampleRate",
      "upperBoundType": "INCLUSIVE",
      "lowerBound": 0,
      "useInR": true,
      "rName": "sample.rate",
      "datatype": "DOUBLE",
      "defaultValue": 1.0,
      "rOrderNum": 10,
      "allowsLists": false,
      "upperBound": 1,
      "lowerBoundType": "EXCLUSIVE",
      "isRequired": false,
      "rDescription": "Specifies the sample rate (the percentage of source vertices to sample), a numeric value in the range (0, 1]. The default value is 1.",
      "alternateNames": [],
      "allowNaN": false,
      "description": "Specifies the sample rate (the percentage of source vertices to sample), a numeric value in the range (0, 1]. The default value is 1."
    },
    {
      "name": "seed",
      "upperBoundType": "INCLUSIVE",
      "lowerBound": -2147483648,
      "useInR": true,
      "rName": "seed",
      "datatype": "INTEGER",
      "allowNaN": false,
      "rOrderNum": 11,
      "allowsLists": false,
      "upperBound": 2147483647,
      "lowerBoundType": "INCLUSIVE",
      "isRequired": false,
      "rDescription": "",
      "alternateNames": [],
      "description": ""
    },
    {
      "name": "MaxDistance",
      "upperBoundType": "INCLUSIVE",
      "lowerBound": -2147483648,
      "useInR": true,
      "rName": "max.distance",
      "datatype": "INTEGER",
      "defaultValue": 10,
      "rOrderNum": 8,
      "allowsLists": false,
      "upperBound": 2147483647,
      "lowerBoundType": "INCLUSIVE",
      "isRequired": false,
      "rDescription": "Specifies the maximum distance between source and target for which the function outputs the vertices. The max_distance must be an integer. If max_distance is negative, the distance between source and target is unbounded. The default is value is 10.",
      "alternateNames": [],
      "allowNaN": false,
      "description": "Specifies the maximum distance between source and target for which the function outputs the vertices. The max_distance must be an integer. If max_distance is negative, the distance between source and target is unbounded. The default is value is 10."
    },
    {
      "name": "Directed",
      "allowsLists": false,
      "useInR": true,
      "datatype": "BOOLEAN",
      "defaultValue": true,
      "rOrderNum": 6,
      "rName": "directed",
      "isRequired": false,
      "rDescription": "Specifies whether the graph is directed. The default value is 'true'.",
      "alternateNames": [],
      "description": "Specifies whether the graph is directed. The default value is 'true'."
    },
    {
      "name": "GroupSize",
      "upperBoundType": "INCLUSIVE",
      "lowerBound": 1,
      "useInR": true,
      "rName": "group.size",
      "datatype": "LONG",
      "allowNaN": false,
      "rOrderNum": 9,
      "allowsLists": false,
      "upperBound": 9223372036854775807,
      "lowerBoundType": "INCLUSIVE",
      "isRequired": false,
      "rDescription": "Specifies the number of source vertices that execute a single-node shortest path (SNSP) algorithm in parallel. If group_size exceeds the number of source vertices in a partition, then the number of source vertices in the partition is the group size. By default, the function uses cluster and query characteristics to determine the optimal group size.",
      "alternateNames": [],
      "description": "Specifies the number of source vertices that execute a single-node shortest path (SNSP) algorithm in parallel. If group_size exceeds the number of source vertices in a partition, then the number of source vertices in the partition is the group size. By default, the function uses cluster and query characteristics to determine the optimal group size."
    }
  ]
}