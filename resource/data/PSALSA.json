{
  "json_schema_major_version": "1",
  "json_schema_minor_version": "1",
  "json_content_version": "1",
  "function_name": "psalsa",
  "function_version": "1.1",
  "function_type": "graph",
  "short_description": "Computes the psalsa score for all nodes in a bipartite graph",
  "long_description": "Computes the psalsa score for all nodes in a bipartite graphrepresented by two database tables. The assumption is that the function is provided inputs as in the following example invocation:CREATE TABLE edges (source source_type, target target_type)CREATE TABLE vertices as select distinct source as node from edges union select distinct target from edgesThis function has two arguments -1.'TELEPORTPROB(double)' - provides the damping factor for the psalsa algorithm.2.RANDOMWALKLENGTH(integer) - provides the step number of the random walk which is used to generate the psalsa scorethe target vertex key of an edge.",
  "input_tables": [
    {
      "requiredInputKind": [
        "PartitionByKey"
      ],
      "isOrdered": false,
      "partitionByOne": false,
      "name": "vertices",
      "isRequired": true,
      "description": "Specifies the vertices, including all the vertices (both hub and authorities), in the bipartite graph",
      "datatype": "TABLE_ALIAS",
      "allowsLists": false,
      "rName": "vertices",
      "useInR": true
    },
    {
      "requiredInputKind": [
        "PartitionByKey"
      ],
      "isOrdered": false,
      "partitionByOne": false,
      "name": "edges",
      "isRequired": true,
      "description": "Specifies the edges of the bipartite graph",
      "datatype": "TABLE_ALIAS",
      "allowsLists": false,
      "rName": "edges",
      "useInR": true
    },
    {
      "requiredInputKind": [
        "PartitionByKey"
      ],
      "isOrdered": false,
      "partitionByOne": false,
      "name": "sources",
      "isRequired": false,
      "description": "Specifies the “source” vertices in the graph.",
      "datatype": "TABLE_ALIAS",
      "allowsLists": false,
      "rName": "sources",
      "useInR": true
    },
    {
      "requiredInputKind": [
        "PartitionByKey"
      ],
      "isOrdered": false,
      "partitionByOne": false,
      "name": "targets",
      "isRequired": false,
      "description": "Specifies the “target” vertices in the graph",
      "datatype": "TABLE_ALIAS",
      "allowsLists": false,
      "rName": "targets",
      "useInR": true
    }
  ],
  "argument_clauses": [
    {
      "targetTable": "edges",
      "checkDuplicate": true,
      "allowPadding": true,
      "name": "TargetKey",
      "isRequired": true,
      "description": "The names of the target key columns in the edges table",
      "datatype": "COLUMNS",
      "allowsLists": true,
      "rName": "target.key",
      "useInR": true
    },
    {
      "targetTable": "edges",
      "checkDuplicate": true,
      "allowPadding": true,
      "name": "SourceKey",
      "isRequired": true,
      "description": "The names of the source key columns in the edges table",
      "datatype": "COLUMNS",
      "allowsLists": true,
      "rName": "source.key",
      "useInR": true
    },
    {
      "targetTable": "edges",
      "checkDuplicate": false,
      "allowedTypeGroups": [
        "NUMERIC"
      ],
      "requiredLength": 1,
      "allowPadding": true,
      "name": "EdgeWeight",
      "isRequired": false,
      "description": "The name of the column in the edges table that stores the weights of the edges in the bipartite graph Input columns must contain numeric SQL types.",
      "datatype": "COLUMNS",
      "allowsLists": false,
      "rName": "edge.weight",
      "useInR": true
    },
    {
      "lowerBound": 0,
      "lowerBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "MaxHubNum",
      "isRequired": true,
      "description": "The maximum number of hub vertices with the highest score output for each hub vertex The input value must be no less than 0.",
      "datatype": "INTEGER",
      "allowsLists": false,
      "rName": "max.hub.num",
      "useInR": true
    },
    {
      "lowerBound": 0,
      "lowerBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "MaxAuthorityNum",
      "isRequired": true,
      "description": "The maximum number of authority vertices with the highest score output for each hub vertex The input value must be no less than 0.",
      "datatype": "INTEGER",
      "allowsLists": false,
      "rName": "max.authority.num",
      "useInR": true
    },
    {
      "defaultValue": 0.15,
      "lowerBound": 0,
      "upperBound": 1,
      "lowerBoundType": "INCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "TeleportProb",
      "isRequired": false,
      "description": "The possibility ε, a value between 0 and 1, representing the jump to the seed vertex during random walk The input value must be no less than 0.0 and no greater than 1.0. The default value is 0.15.",
      "datatype": "DOUBLE",
      "allowsLists": false,
      "rName": "teleport.prob",
      "useInR": true
    },
    {
      "defaultValue": 5000,
      "lowerBound": 1,
      "lowerBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "RandomWalkLength",
      "isRequired": false,
      "description": "The random walk length L for each hub vertex The input value must be no less than 1. The default value is 5000.",
      "datatype": "INTEGER",
      "allowsLists": false,
      "rName": "random.walk.length",
      "useInR": true
    },
    {
      "targetTable": "vertices",
      "checkDuplicate": true,
      "allowPadding": true,
      "name": "Accumulate",
      "isRequired": false,
      "description": "Columns from the input table to be passed through from input to output.",
      "datatype": "COLUMNS",
      "allowsLists": true,
      "rName": "accumulate",
      "useInR": true
    }
  ]
}