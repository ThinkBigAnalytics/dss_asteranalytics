{
  "json_schema_major_version": "1",
  "json_schema_minor_version": "2",
  "json_content_version": "1",
  "function_name": "AMLGenerator",
  "function_version": "1.3",
  "function_type": "driver",
  "function_r_name": "aa.aml.generator",
  "short_description": "Generates an AML file from input model tables.",
  "long_description": "AMLGenerator generates an AML file from input model tables. The AML file is generated on the specified path location intended for Scoring use.",
  "input_tables": [
    {
      "name": "ModelTable",
      "allowsLists": false,
      "useInR": true,
      "description": "Specifies the input model table representing input data for which aml file is to be generated. The table could be either database tables or files installed on the database.",
      "isRequired": false,
      "datatype": "TABLE_ALIAS",
      "rOrderNum": 2,
      "rName": "data",
      "alternateNames": [],
      "rDescription": "Specifies the input model table representing input data for which aml file is to be generated. The table could be either database tables or files installed on the database.",
      "requiredInputKind": [],
      "isOrdered": false,
      "partitionByOne": false
    }
  ],
  "argument_clauses": [
    {
      "name": "ModelType",
      "allowsLists": false,
      "isOutputColumn": false,
      "useInR": true,
      "datatype": "STRING",
      "rOrderNum": 1,
      "rName": "model.type",
      "isRequired": true,
      "rDescription": "Specifies the function name for which this aml file will be used. For predictors, this represents the type of the model trained. ",
      "alternateNames": [],
      "permittedValues": [],
      "description": "Specifies the function name for which this aml file will be used. For predictors, this represents the type of the model trained. "
    },
    {
      "name": "RequestColNames",
      "allowsLists": true,
      "isOutputColumn": false,
      "useInR": true,
      "datatype": "STRING",
      "rOrderNum": 5,
      "rName": "request.col.names",
      "isRequired": true,
      "rDescription": "Specifies the column names of the request to be scored. For a predictor, these column names typically match the columns names of the training data used to train the model.",
      "alternateNames": [],
      "permittedValues": [],
      "allowPadding": true,
      "matchLengthOfArgument": "",
      "description": "Specifies the column names of the request to be scored. For a predictor, these column names typically match the columns names of the training data used to train the model."
    },
    {
      "name": "RequestColTypes",
      "allowsLists": true,
      "isOutputColumn": false,
      "useInR": true,
      "datatype": "STRING",
      "rOrderNum": 6,
      "rName": "request.col.types",
      "isRequired": true,
      "rDescription": "Specifies the column types of the request to be scored. For a predictor, these column types typically match the columns types of the training data used to train the model.",
      "alternateNames": [],
      "permittedValues": [],
      "allowPadding": false,
      "matchLengthOfArgument": "RequestColNames",
      "description": "Specifies the column types of the request to be scored. For a predictor, these column types typically match the columns types of the training data used to train the model."
    },
    {
      "name": "ModelTag",
      "allowsLists": false,
      "isOutputColumn": false,
      "useInR": true,
      "datatype": "STRING",
      "rOrderNum": 3,
      "rName": "model.tag",
      "isRequired": false,
      "rDescription": "Specifies the input model table tag for input model table specified in model.table clause.",
      "alternateNames": [],
      "permittedValues": [],
      "description": "Specifies the input model table tag for input model table specified in ModelTable clause."
    },
    {
      "name": "InstalledFile",
      "allowsLists": false,
      "useInR": true,
      "datatype": "BOOLEAN",
      "defaultValue": false,
      "rOrderNum": 4,
      "rName": "installed.file",
      "isRequired": false,
      "rDescription": "Specifies whether the corresponding value in model.table is a file installed on database or a table on database. If model.table is a database table, set this to false (default) and if it is a file, set this to true.",
      "alternateNames": [],
      "description": "Specifies whether the corresponding value in ModelTable is a file installed on database or a table on database. If ModelTable is a database table, set this to false (default) and if it is a file, set this to true."
    },
    {
      "name": "AMLPrefix",
      "allowsLists": false,
      "isOutputColumn": false,
      "useInR": true,
      "datatype": "STRING",
      "defaultValue": "model",
      "rOrderNum": 7,
      "rName": "aml.prefix",
      "isRequired": false,
      "rDescription": " Specifies the name of the generated AML model file. Default value is \u201cmodel\u201d. The output file is stored with suffix \u201c.aml\u201d.",
      "alternateNames": [],
      "permittedValues": [],
      "description": " Specifies the name of the generated AML model file. Default value is \u201cmodel\u201d. The output file is stored with suffix \u201c.aml\u201d."
    },
    {
      "name": "RequestArgName1",
      "allowsLists": false,
      "isOutputColumn": false,
      "useInR": true,
      "datatype": "STRING",
      "rOrderNum": 9,
      "rName": "request.arg.name1",
      "isRequired": false,
      "rDescription": "Specifies the argument clause name for the function to be used in scoring. These clauses are the same as mentioned in the corresponding SQL-MapReduce function documentation, with some exceptions. The request.arg.name should start from 1 in a sequential manner. For example, the following sequence of clauses is acceptable: request.arg.name1, request.arg.name2, request.arg.name3. However, this sequence is not acceptable: request.arg.name1, request.arg.name2, request.arg.name4. The maximum value of n is 30. The values for corresponding arguments are provided in request.arg.val clause. ",
      "alternateNames": [],
      "permittedValues": [],
      "description": "Specifies the argument clause name for the function to be used in scoring. These clauses are the same as mentioned in the corresponding SQL-MapReduce function documentation, with some exceptions. The RequestArgName should start from 1 in a sequential manner. For example, the following sequence of clauses is acceptable: RequestArgName1, RequestArgName2, RequestArgName3. However, this sequence is not acceptable: RequestArgName1, RequestArgName2, RequestArgName4. The maximum value of n is 30. The values for corresponding arguments are provided in RequestArgVal clause. "
    },
    {
      "name": "RequestArgVal1",
      "allowsLists": false,
      "isOutputColumn": false,
      "useInR": true,
      "datatype": "STRING",
      "rOrderNum": 10,
      "rName": "request.arg.val1",
      "isRequired": false,
      "rDescription": "Specifies the argument clause value for the function to be used in scoring. The value in this clause corresponds to the clause mentioned in request.arg.name for the same value of n. These clause values are the same as mentioned in the documentation for the corresponding SQL-MapReduce function. The request.arg.val should start from 1 in a sequential manner, and follows the same format as request.arg.name. The maximum value of n is 30.",
      "alternateNames": [],
      "permittedValues": [],
      "description": "Specifies the argument clause value for the function to be used in scoring. The value in this clause corresponds to the clause mentioned in RequestArgName for the same value of n. These clause values are the same as mentioned in the documentation for the corresponding SQL-MapReduce function. The RequestArgVal should start from 1 in a sequential manner, and follows the same format as RequestArgName. The maximum value of n is 30."
    },
    {
      "name": "RequestArgName2",
      "allowsLists": false,
      "isOutputColumn": false,
      "useInR": true,
      "datatype": "STRING",
      "rOrderNum": 11,
      "rName": "request.arg.name2",
      "isRequired": false,
      "rDescription": "Specifies the argument clause name for the function to be used in scoring. These clauses are the same as mentioned in the corresponding SQL-MapReduce function documentation, with some exceptions. The request.arg.name should start from 1 in a sequential manner. For example, the following sequence of clauses is acceptable: request.arg.name1, request.arg.name2, request.arg.name3. However, this sequence is not acceptable: request.arg.name1, request.arg.name2, request.arg.name4. The maximum value of n is 30. The values for corresponding arguments are provided in request.arg.val clause. ",
      "alternateNames": [],
      "permittedValues": [],
      "description": "Specifies the argument clause name for the function to be used in scoring. These clauses are the same as mentioned in the corresponding SQL-MapReduce function documentation, with some exceptions. The RequestArgName should start from 1 in a sequential manner. For example, the following sequence of clauses is acceptable: RequestArgName1, RequestArgName2, RequestArgName3. However, this sequence is not acceptable: RequestArgName1, RequestArgName2, RequestArgName4. The maximum value of n is 30. The values for corresponding arguments are provided in RequestArgVal clause. "
    },
    {
      "name": "RequestArgVal2",
      "allowsLists": false,
      "isOutputColumn": false,
      "useInR": true,
      "datatype": "STRING",
      "rOrderNum": 12,
      "rName": "request.arg.val2",
      "isRequired": false,
      "rDescription": "Specifies the argument clause value for the function to be used in scoring. The value in this clause corresponds to the clause mentioned in request.arg.name for the same value of n. These clause values are the same as mentioned in the documentation for the corresponding SQL-MapReduce function. The request.arg.val should start from 1 in a sequential manner, and follows the same format as request.arg.name. The maximum value of n is 30.",
      "alternateNames": [],
      "permittedValues": [],
      "description": "Specifies the argument clause value for the function to be used in scoring. The value in this clause corresponds to the clause mentioned in RequestArgName for the same value of n. These clause values are the same as mentioned in the documentation for the corresponding SQL-MapReduce function. The RequestArgVal should start from 1 in a sequential manner, and follows the same format as RequestArgName. The maximum value of n is 30."
    },
    {
      "name": "RequestArgName3",
      "allowsLists": false,
      "isOutputColumn": false,
      "useInR": true,
      "datatype": "STRING",
      "rOrderNum": 13,
      "rName": "request.arg.name3",
      "isRequired": false,
      "rDescription": "Specifies the argument clause name for the function to be used in scoring. These clauses are the same as mentioned in the corresponding SQL-MapReduce function documentation, with some exceptions. The request.arg.name should start from 1 in a sequential manner. For example, the following sequence of clauses is acceptable: request.arg.name1, request.arg.name2, request.arg.name3. However, this sequence is not acceptable: request.arg.name1, request.arg.name2, request.arg.name4. The maximum value of n is 30. The values for corresponding arguments are provided in request.arg.val clause. ",
      "alternateNames": [],
      "permittedValues": [],
      "description": "Specifies the argument clause name for the function to be used in scoring. These clauses are the same as mentioned in the corresponding SQL-MapReduce function documentation, with some exceptions. The RequestArgName should start from 1 in a sequential manner. For example, the following sequence of clauses is acceptable: RequestArgName1, RequestArgName2, RequestArgName3. However, this sequence is not acceptable: RequestArgName1, RequestArgName2, RequestArgName4. The maximum value of n is 30. The values for corresponding arguments are provided in RequestArgVal clause. "
    },
    {
      "name": "RequestArgVal3",
      "allowsLists": false,
      "isOutputColumn": false,
      "useInR": true,
      "datatype": "STRING",
      "rOrderNum": 14,
      "rName": "request.arg.val3",
      "isRequired": false,
      "rDescription": "Specifies the argument clause value for the function to be used in scoring. The value in this clause corresponds to the clause mentioned in request.arg.name for the same value of n. These clause values are the same as mentioned in the documentation for the corresponding SQL-MapReduce function. The request.arg.val should start from 1 in a sequential manner, and follows the same format as request.arg.name. The maximum value of n is 30.",
      "alternateNames": [],
      "permittedValues": [],
      "description": "Specifies the argument clause value for the function to be used in scoring. The value in this clause corresponds to the clause mentioned in RequestArgName for the same value of n. These clause values are the same as mentioned in the documentation for the corresponding SQL-MapReduce function. The RequestArgVal should start from 1 in a sequential manner, and follows the same format as RequestArgName. The maximum value of n is 30."
    },
    {
      "name": "RequestArgName4",
      "allowsLists": false,
      "isOutputColumn": false,
      "useInR": true,
      "datatype": "STRING",
      "rOrderNum": 15,
      "rName": "request.arg.name4",
      "isRequired": false,
      "rDescription": "Specifies the argument clause name for the function to be used in scoring. These clauses are the same as mentioned in the corresponding SQL-MapReduce function documentation, with some exceptions. The request.arg.name should start from 1 in a sequential manner. For example, the following sequence of clauses is acceptable: request.arg.name1, request.arg.name2, request.arg.name3. However, this sequence is not acceptable: request.arg.name1, request.arg.name2, request.arg.name4. The maximum value of n is 30. The values for corresponding arguments are provided in request.arg.val clause. ",
      "alternateNames": [],
      "permittedValues": [],
      "description": "Specifies the argument clause name for the function to be used in scoring. These clauses are the same as mentioned in the corresponding SQL-MapReduce function documentation, with some exceptions. The RequestArgName should start from 1 in a sequential manner. For example, the following sequence of clauses is acceptable: RequestArgName1, RequestArgName2, RequestArgName3. However, this sequence is not acceptable: RequestArgName1, RequestArgName2, RequestArgName4. The maximum value of n is 30. The values for corresponding arguments are provided in RequestArgVal clause. "
    },
    {
      "name": "RequestArgVal4",
      "allowsLists": false,
      "isOutputColumn": false,
      "useInR": true,
      "datatype": "STRING",
      "rOrderNum": 16,
      "rName": "request.arg.val4",
      "isRequired": false,
      "rDescription": "Specifies the argument clause value for the function to be used in scoring. The value in this clause corresponds to the clause mentioned in request.arg.name for the same value of n. These clause values are the same as mentioned in the documentation for the corresponding SQL-MapReduce function. The request.arg.val should start from 1 in a sequential manner, and follows the same format as request.arg.name. The maximum value of n is 30.",
      "alternateNames": [],
      "permittedValues": [],
      "description": "Specifies the argument clause value for the function to be used in scoring. The value in this clause corresponds to the clause mentioned in RequestArgName for the same value of n. These clause values are the same as mentioned in the documentation for the corresponding SQL-MapReduce function. The RequestArgVal should start from 1 in a sequential manner, and follows the same format as RequestArgName. The maximum value of n is 30."
    },
    {
      "name": "RequestArgName5",
      "allowsLists": false,
      "isOutputColumn": false,
      "useInR": true,
      "datatype": "STRING",
      "rOrderNum": 17,
      "rName": "request.arg.name5",
      "isRequired": false,
      "rDescription": "Specifies the argument clause name for the function to be used in scoring. These clauses are the same as mentioned in the corresponding SQL-MapReduce function documentation, with some exceptions. The request.arg.name should start from 1 in a sequential manner. For example, the following sequence of clauses is acceptable: request.arg.name1, request.arg.name2, request.arg.name3. However, this sequence is not acceptable: request.arg.name1, request.arg.name2, request.arg.name4. The maximum value of n is 30. The values for corresponding arguments are provided in request.arg.val clause. ",
      "alternateNames": [],
      "permittedValues": [],
      "description": "Specifies the argument clause name for the function to be used in scoring. These clauses are the same as mentioned in the corresponding SQL-MapReduce function documentation, with some exceptions. The RequestArgName should start from 1 in a sequential manner. For example, the following sequence of clauses is acceptable: RequestArgName1, RequestArgName2, RequestArgName3. However, this sequence is not acceptable: RequestArgName1, RequestArgName2, RequestArgName4. The maximum value of n is 30. The values for corresponding arguments are provided in RequestArgVal clause. "
    },
    {
      "name": "RequestArgVal5",
      "allowsLists": false,
      "isOutputColumn": false,
      "useInR": true,
      "datatype": "STRING",
      "rOrderNum": 18,
      "rName": "request.arg.val5",
      "isRequired": false,
      "rDescription": "Specifies the argument clause value for the function to be used in scoring. The value in this clause corresponds to the clause mentioned in request.arg.name for the same value of n. These clause values are the same as mentioned in the documentation for the corresponding SQL-MapReduce function. The request.arg.val should start from 1 in a sequential manner, and follows the same format as request.arg.name. The maximum value of n is 30.",
      "alternateNames": [],
      "permittedValues": [],
      "description": "Specifies the argument clause value for the function to be used in scoring. The value in this clause corresponds to the clause mentioned in RequestArgName for the same value of n. These clause values are the same as mentioned in the documentation for the corresponding SQL-MapReduce function. The RequestArgVal should start from 1 in a sequential manner, and follows the same format as RequestArgName. The maximum value of n is 30."
    },
    {
      "name": "RequestArgName6",
      "allowsLists": false,
      "isOutputColumn": false,
      "useInR": true,
      "datatype": "STRING",
      "rOrderNum": 19,
      "rName": "request.arg.name6",
      "isRequired": false,
      "rDescription": "Specifies the argument clause name for the function to be used in scoring. These clauses are the same as mentioned in the corresponding SQL-MapReduce function documentation, with some exceptions. The request.arg.name should start from 1 in a sequential manner. For example, the following sequence of clauses is acceptable: request.arg.name1, request.arg.name2, request.arg.name3. However, this sequence is not acceptable: request.arg.name1, request.arg.name2, request.arg.name4. The maximum value of n is 30. The values for corresponding arguments are provided in request.arg.val clause. ",
      "alternateNames": [],
      "permittedValues": [],
      "description": "Specifies the argument clause name for the function to be used in scoring. These clauses are the same as mentioned in the corresponding SQL-MapReduce function documentation, with some exceptions. The RequestArgName should start from 1 in a sequential manner. For example, the following sequence of clauses is acceptable: RequestArgName1, RequestArgName2, RequestArgName3. However, this sequence is not acceptable: RequestArgName1, RequestArgName2, RequestArgName4. The maximum value of n is 30. The values for corresponding arguments are provided in RequestArgVal clause. "
    },
    {
      "name": "RequestArgVal6",
      "allowsLists": false,
      "isOutputColumn": false,
      "useInR": true,
      "datatype": "STRING",
      "rOrderNum": 20,
      "rName": "request.arg.val6",
      "isRequired": false,
      "rDescription": "Specifies the argument clause value for the function to be used in scoring. The value in this clause corresponds to the clause mentioned in request.arg.name for the same value of n. These clause values are the same as mentioned in the documentation for the corresponding SQL-MapReduce function. The request.arg.val should start from 1 in a sequential manner, and follows the same format as request.arg.name. The maximum value of n is 30.",
      "alternateNames": [],
      "permittedValues": [],
      "description": "Specifies the argument clause value for the function to be used in scoring. The value in this clause corresponds to the clause mentioned in RequestArgName for the same value of n. These clause values are the same as mentioned in the documentation for the corresponding SQL-MapReduce function. The RequestArgVal should start from 1 in a sequential manner, and follows the same format as RequestArgName. The maximum value of n is 30."
    },
    {
      "name": "RequestArgName7",
      "allowsLists": false,
      "isOutputColumn": false,
      "useInR": true,
      "datatype": "STRING",
      "rOrderNum": 21,
      "rName": "request.arg.name7",
      "isRequired": false,
      "rDescription": "Specifies the argument clause name for the function to be used in scoring. These clauses are the same as mentioned in the corresponding SQL-MapReduce function documentation, with some exceptions. The request.arg.name should start from 1 in a sequential manner. For example, the following sequence of clauses is acceptable: request.arg.name1, request.arg.name2, request.arg.name3. However, this sequence is not acceptable: request.arg.name1, request.arg.name2, request.arg.name4. The maximum value of n is 30. The values for corresponding arguments are provided in request.arg.val clause. ",
      "alternateNames": [],
      "permittedValues": [],
      "description": "Specifies the argument clause name for the function to be used in scoring. These clauses are the same as mentioned in the corresponding SQL-MapReduce function documentation, with some exceptions. The RequestArgName should start from 1 in a sequential manner. For example, the following sequence of clauses is acceptable: RequestArgName1, RequestArgName2, RequestArgName3. However, this sequence is not acceptable: RequestArgName1, RequestArgName2, RequestArgName4. The maximum value of n is 30. The values for corresponding arguments are provided in RequestArgVal clause. "
    },
    {
      "name": "RequestArgVal7",
      "allowsLists": false,
      "isOutputColumn": false,
      "useInR": true,
      "datatype": "STRING",
      "rOrderNum": 22,
      "rName": "request.arg.val7",
      "isRequired": false,
      "rDescription": "Specifies the argument clause value for the function to be used in scoring. The value in this clause corresponds to the clause mentioned in request.arg.name for the same value of n. These clause values are the same as mentioned in the documentation for the corresponding SQL-MapReduce function. The request.arg.val should start from 1 in a sequential manner, and follows the same format as request.arg.name. The maximum value of n is 30.",
      "alternateNames": [],
      "permittedValues": [],
      "description": "Specifies the argument clause value for the function to be used in scoring. The value in this clause corresponds to the clause mentioned in RequestArgName for the same value of n. These clause values are the same as mentioned in the documentation for the corresponding SQL-MapReduce function. The RequestArgVal should start from 1 in a sequential manner, and follows the same format as RequestArgName. The maximum value of n is 30."
    },
    {
      "name": "RequestArgName8",
      "allowsLists": false,
      "isOutputColumn": false,
      "useInR": true,
      "datatype": "STRING",
      "rOrderNum": 23,
      "rName": "request.arg.name8",
      "isRequired": false,
      "rDescription": "Specifies the argument clause name for the function to be used in scoring. These clauses are the same as mentioned in the corresponding SQL-MapReduce function documentation, with some exceptions. The request.arg.name should start from 1 in a sequential manner. For example, the following sequence of clauses is acceptable: request.arg.name1, request.arg.name2, request.arg.name3. However, this sequence is not acceptable: request.arg.name1, request.arg.name2, request.arg.name4. The maximum value of n is 30. The values for corresponding arguments are provided in request.arg.val clause. ",
      "alternateNames": [],
      "permittedValues": [],
      "description": "Specifies the argument clause name for the function to be used in scoring. These clauses are the same as mentioned in the corresponding SQL-MapReduce function documentation, with some exceptions. The RequestArgName should start from 1 in a sequential manner. For example, the following sequence of clauses is acceptable: RequestArgName1, RequestArgName2, RequestArgName3. However, this sequence is not acceptable: RequestArgName1, RequestArgName2, RequestArgName4. The maximum value of n is 30. The values for corresponding arguments are provided in RequestArgVal clause. "
    },
    {
      "name": "RequestArgVal8",
      "allowsLists": false,
      "isOutputColumn": false,
      "useInR": true,
      "datatype": "STRING",
      "rOrderNum": 24,
      "rName": "request.arg.val8",
      "isRequired": false,
      "rDescription": "Specifies the argument clause value for the function to be used in scoring. The value in this clause corresponds to the clause mentioned in request.arg.name for the same value of n. These clause values are the same as mentioned in the documentation for the corresponding SQL-MapReduce function. The request.arg.val should start from 1 in a sequential manner, and follows the same format as request.arg.name. The maximum value of n is 30.",
      "alternateNames": [],
      "permittedValues": [],
      "description": "Specifies the argument clause value for the function to be used in scoring. The value in this clause corresponds to the clause mentioned in RequestArgName for the same value of n. These clause values are the same as mentioned in the documentation for the corresponding SQL-MapReduce function. The RequestArgVal should start from 1 in a sequential manner, and follows the same format as RequestArgName. The maximum value of n is 30."
    },
    {
      "name": "RequestArgName9",
      "allowsLists": false,
      "isOutputColumn": false,
      "useInR": true,
      "datatype": "STRING",
      "rOrderNum": 25,
      "rName": "request.arg.name9",
      "isRequired": false,
      "rDescription": "Specifies the argument clause name for the function to be used in scoring. These clauses are the same as mentioned in the corresponding SQL-MapReduce function documentation, with some exceptions. The request.arg.name should start from 1 in a sequential manner. For example, the following sequence of clauses is acceptable: request.arg.name1, request.arg.name2, request.arg.name3. However, this sequence is not acceptable: request.arg.name1, request.arg.name2, request.arg.name4. The maximum value of n is 30. The values for corresponding arguments are provided in request.arg.val clause. ",
      "alternateNames": [],
      "permittedValues": [],
      "description": "Specifies the argument clause name for the function to be used in scoring. These clauses are the same as mentioned in the corresponding SQL-MapReduce function documentation, with some exceptions. The RequestArgName should start from 1 in a sequential manner. For example, the following sequence of clauses is acceptable: RequestArgName1, RequestArgName2, RequestArgName3. However, this sequence is not acceptable: RequestArgName1, RequestArgName2, RequestArgName4. The maximum value of n is 30. The values for corresponding arguments are provided in RequestArgVal clause. "
    },
    {
      "name": "RequestArgVal9",
      "allowsLists": false,
      "isOutputColumn": false,
      "useInR": true,
      "datatype": "STRING",
      "rOrderNum": 26,
      "rName": "request.arg.val9",
      "isRequired": false,
      "rDescription": "Specifies the argument clause value for the function to be used in scoring. The value in this clause corresponds to the clause mentioned in request.arg.name for the same value of n. These clause values are the same as mentioned in the documentation for the corresponding SQL-MapReduce function. The request.arg.val should start from 1 in a sequential manner, and follows the same format as request.arg.name. The maximum value of n is 30.",
      "alternateNames": [],
      "permittedValues": [],
      "description": "Specifies the argument clause value for the function to be used in scoring. The value in this clause corresponds to the clause mentioned in RequestArgName for the same value of n. These clause values are the same as mentioned in the documentation for the corresponding SQL-MapReduce function. The RequestArgVal should start from 1 in a sequential manner, and follows the same format as RequestArgName. The maximum value of n is 30."
    },
    {
      "name": "RequestArgName10",
      "allowsLists": false,
      "isOutputColumn": false,
      "useInR": true,
      "datatype": "STRING",
      "rOrderNum": 27,
      "rName": "request.arg.name10",
      "isRequired": false,
      "rDescription": "Specifies the argument clause name for the function to be used in scoring. These clauses are the same as mentioned in the corresponding SQL-MapReduce function documentation, with some exceptions. The request.arg.name should start from 1 in a sequential manner. For example, the following sequence of clauses is acceptable: request.arg.name1, request.arg.name2, request.arg.name3. However, this sequence is not acceptable: request.arg.name1, request.arg.name2, request.arg.name4. The maximum value of n is 30. The values for corresponding arguments are provided in request.arg.val clause. ",
      "alternateNames": [],
      "permittedValues": [],
      "description": "Specifies the argument clause name for the function to be used in scoring. These clauses are the same as mentioned in the corresponding SQL-MapReduce function documentation, with some exceptions. The RequestArgName should start from 1 in a sequential manner. For example, the following sequence of clauses is acceptable: RequestArgName1, RequestArgName2, RequestArgName3. However, this sequence is not acceptable: RequestArgName1, RequestArgName2, RequestArgName4. The maximum value of n is 30. The values for corresponding arguments are provided in RequestArgVal clause. "
    },
    {
      "name": "RequestArgVal10",
      "allowsLists": false,
      "isOutputColumn": false,
      "useInR": true,
      "datatype": "STRING",
      "rOrderNum": 28,
      "rName": "request.arg.val10",
      "isRequired": false,
      "rDescription": "Specifies the argument clause value for the function to be used in scoring. The value in this clause corresponds to the clause mentioned in request.arg.name for the same value of n. These clause values are the same as mentioned in the documentation for the corresponding SQL-MapReduce function. The request.arg.val should start from 1 in a sequential manner, and follows the same format as request.arg.name. The maximum value of n is 30.",
      "alternateNames": [],
      "permittedValues": [],
      "description": "Specifies the argument clause value for the function to be used in scoring. The value in this clause corresponds to the clause mentioned in RequestArgName for the same value of n. These clause values are the same as mentioned in the documentation for the corresponding SQL-MapReduce function. The RequestArgVal should start from 1 in a sequential manner, and follows the same format as RequestArgName. The maximum value of n is 30."
    }
  ]
}