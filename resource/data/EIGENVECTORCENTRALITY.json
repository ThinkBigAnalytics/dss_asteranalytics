{
  "json_schema_major_version": "1",
  "json_schema_minor_version": "2",
  "json_content_version": "1",
  "function_name": "EigenvectorCentrality",
  "function_version": "1.2",
  "function_type": "graph",
  "function_r_name": "aa.eigenvector.centrality",
  "short_description": "Algorithm to calculate eigenvector centrality.",
  "long_description": "Eigenvector centrality is a method to calculate the centrality (relative importance) of each node in a graph. Katz centrality, Bonacich centrality and Eigenvector centrality are supported in this function.",
  "input_tables": [
    {
      "requiredInputKind": [
        "PartitionByKey"
      ],
      "isOrdered": false,
      "partitionByOne": false,
      "name": "vertices",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": "The input table contains vertices in the graph. ",
      "description": "The input table contains vertices in the graph. ",
      "datatype": "TABLE_ALIAS",
      "allowsLists": false,
      "rName": "vertices.data",
      "useInR": true,
      "rOrderNum": 1
    },
    {
      "requiredInputKind": [
        "PartitionByKey"
      ],
      "isOrdered": false,
      "partitionByOne": false,
      "name": "edges",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": "The input table contains edges in the graph. ",
      "description": "The input table contains edges in the graph. ",
      "datatype": "TABLE_ALIAS",
      "allowsLists": false,
      "rName": "edges.data",
      "useInR": true,
      "rOrderNum": 2
    }
  ],
  "argument_clauses": [
    {
      "targetTable": [
        "edges"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "ALL"
      ],
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "TargetKey",
      "alternateNames": [],
      "isRequired": true,
      "rDescription": "Specifies the names of the target key columns in the edges table. The number and data types of columns must correspond to those of vertex_key.",
      "description": "Specifies the names of the target key columns in the edges table. The number and data types of columns must correspond to those of vertex_key.",
      "datatype": "COLUMNS",
      "allowsLists": true,
      "rName": "target.key",
      "useInR": true,
      "rOrderNum": 3
    },
    {
      "targetTable": [
        "edges"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "NUMERIC"
      ],
      "requiredLength": 1,
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "EdgeWeight",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the name of the edges table column that contains the edge weights. The edge weights must be positive values. If you omit this argument, then the graph is unweighted.",
      "description": "Specifies the name of the edges table column that contains the edge weights. The edge weights must be positive values. If you omit this argument, then the graph is unweighted.",
      "datatype": "COLUMNS",
      "allowsLists": false,
      "rName": "weights",
      "useInR": true,
      "rOrderNum": 4
    },
    {
      "targetTable": [
        "vertices"
      ],
      "checkDuplicate": true,
      "allowedTypes": [],
      "allowedTypeGroups": [
        "ALL"
      ],
      "matchLengthOfArgument": "",
      "allowPadding": true,
      "name": "Accumulate",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the names of the input columns to copy to the output table.",
      "description": "Specifies the names of the input columns to copy to the output table.",
      "datatype": "COLUMNS",
      "allowsLists": true,
      "rName": "accumulate",
      "useInR": true,
      "rOrderNum": 11
    },
    {
      "permittedValues": [
        "katz",
        "bonacich",
        "eigenvector"
      ],
      "defaultValue": "eigenvector",
      "isOutputColumn": false,
      "name": "Family",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": " Specifies the centrality formula. The default value is 'eigenvector'. For descriptions of the centrality formulas",
      "description": " Specifies the centrality formula. The default value is 'eigenvector'. For descriptions of the centrality formulas",
      "datatype": "STRING",
      "allowsLists": false,
      "rName": "family",
      "useInR": true,
      "rOrderNum": 5
    },
    {
      "defaultValue": 0.85,
      "lowerBound": -Infinity,
      "upperBound": Infinity,
      "lowerBoundType": "INCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "Alpha",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the alpha value for the Katz or Bonacich centrality formula. The default value is 0.85.",
      "description": "Specifies the alpha value for the Katz or Bonacich centrality formula. The default value is 0.85.",
      "datatype": "DOUBLE",
      "allowsLists": false,
      "rName": "alpha",
      "useInR": true,
      "rOrderNum": 6
    },
    {
      "lowerBound": -Infinity,
      "upperBound": Infinity,
      "lowerBoundType": "INCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "Beta",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the beta value for the Katz or Bonacich centrality formula. The default value is 1 for Katz and 0 for Bonacich.",
      "description": "Specifies the beta value for the Katz or Bonacich centrality formula. The default value is 1 for Katz and 0 for Bonacich.",
      "datatype": "DOUBLE",
      "allowsLists": false,
      "rName": "beta",
      "useInR": true,
      "rOrderNum": 7
    },
    {
      "defaultValue": true,
      "name": "Directed",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies whether the graph is directed. The default value is 'true'.",
      "description": "Specifies whether the graph is directed. The default value is 'true'.",
      "datatype": "BOOLEAN",
      "allowsLists": false,
      "rName": "directed",
      "useInR": true,
      "rOrderNum": 8
    },
    {
      "defaultValue": 20,
      "rDefaultValue": 100000.0,
      "lowerBound": 0,
      "upperBound": 2147483647,
      "lowerBoundType": "EXCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "MaxIterNum",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": " Specifies the maximum number of iterations for the function. The default value is 20. ",
      "description": " Specifies the maximum number of iterations for the function. The default value is 20. ",
      "datatype": "INTEGER",
      "allowsLists": false,
      "rName": "maxiter",
      "useInR": true,
      "rOrderNum": 9
    },
    {
      "defaultValue": 0.001,
      "rDefaultValue": 1.0E-10,
      "lowerBound": 0,
      "upperBound": Infinity,
      "lowerBoundType": "EXCLUSIVE",
      "upperBoundType": "INCLUSIVE",
      "allowNaN": false,
      "name": "Threshold",
      "alternateNames": [],
      "isRequired": false,
      "rDescription": "Specifies the threshold for convergence (the difference of between bk+1 and bk). The default value is 0.001.",
      "description": "Specifies the threshold for convergence (the difference of between bk+1 and bk). The default value is 0.001.",
      "datatype": "DOUBLE",
      "allowsLists": false,
      "rName": "tol",
      "useInR": true,
      "rOrderNum": 10
    }
  ]
}
